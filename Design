import sys
import os
import cv2
import time
import yaml

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMessageBox

# Creating the main window
class App(QMainWindow):
    def __init__(self):
        super().__init__()
        self.title = "Andre, Argel & Aidan's amazingly awesome array alignment"
        self.left = 0
        self.top = 0
        self.width = 300
        self.height = 200
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        self.tab_widget = MyTabWidget(self)
        self.setCentralWidget(self.tab_widget)
  
        self.show()


# Creating tab widgets
class MyTabWidget(QWidget):
    def __init__(self, parent):
        super(QWidget, self).__init__(parent)
        self.layout = QVBoxLayout(self)
  
        # Initialize tab screen
        self.tabs = QTabWidget()
        self.tabDataUpload = QWidget()
        self.tabPointSelection = QWidget()
        self.tabProcess = QWidget()
        self.tabDataReview = QWidget()
        # self.tabDataCompare = QWidget()
        self.tabs.resize(300, 200)
        self.path = ""
        self.vidPath = ""
        self.cmd = ""
        self.title =""
        self.framechanges = 0
  
        # Add tabs
        self.tabs.addTab(self.tabDataUpload, "Upload")
        self.tabs.addTab(self.tabPointSelection, "Choose Points")
        self.tabs.addTab(self.tabProcess, "Process Videos")
        self.tabs.addTab(self.tabDataReview, "Review")
        # self.tabs.addTab(self.tabDataCompare, "Compare")
  
        # Create first tab
        self.tabDataUpload.layout = QGridLayout()
        self.uploadVideoLabel = QLabel()
        self.uploadVideoLabel.setText("Upload folders containing videos")

        self.successLabel = QLabel()
        self.successLabel.setText("")

        self.listFolders = QListWidget()
        self.listFolders
        try:
            with open('config.yaml', 'r') as file:
                info = yaml.safe_load(file)
                if len(info) == 0:
                    # should probably change to !=3
                    x = 1/0
        except:
            info= {"folderPath": [],"videoPaths":[], "points":[]}
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False)   
        if len(info["folderPath"]) != self.listFolders.count:
            # for i in range(len(info["folderPath"])):
            self.listFolders.addItems(info["folderPath"])

        self.btnSearch = QPushButton("Search Folder")
        self.btnSearch.clicked.connect(self.FolderSearch)

        self.searchField = QLineEdit()
        self.searchField.setPlaceholderText("Enter Folder Path")
        self.searchField.returnPressed.connect(self.FolderSearchField)


        self.tabDataUpload.layout.addWidget(self.uploadVideoLabel,0,0,1,4, alignment=QtCore.Qt.AlignCenter)
        # self.tabDataUpload.layout.addWidget(self.successLabel,1,0,1,4, alignment=QtCore.Qt.AlignCenter)    
        self.tabDataUpload.layout.addWidget(self.listFolders,1,0,1,4, alignment=QtCore.Qt.AlignCenter)   
        self.tabDataUpload.layout.addWidget(self.btnSearch,2,0,1,1)
        self.tabDataUpload.layout.addWidget(self.searchField,2,1,1,3)

        self.btnCreateProj = QPushButton("Create Project")
        self.btnCreateProj.clicked.connect(self.Create_DLC_Project)
        self.btnCreateProj.setDisabled(True)
        self.btnCreateProj.setStyleSheet('QPushButton {background-color: red; color: black;}')
        self.tabDataUpload.layout.addWidget(self.btnCreateProj,3,0,1,2)

        self.btnOpenProj = QPushButton("Open Project")
        self.btnOpenProj.clicked.connect(self.Open_DLC_Project)
        # self.btnOpenProj.setDisabled(True)
        self.btnOpenProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')
        # option to add uploaded files to existing project
        self.tabDataUpload.layout.addWidget(self.btnOpenProj,3,2,1,2)


        self.tabDataUpload.setLayout(self.tabDataUpload.layout)
        # tab 1 end

        # tab tabPointSelection

        self.tabPointSelection.layout = QVBoxLayout()
        self.instructionsPointsLabel = QLabel()
        self.instructionsPointsLabel.setText("Please select the points you wish to use in each of your videos")
        self.tabPointSelection.layout.addWidget(self.instructionsPointsLabel, alignment=QtCore.Qt.AlignCenter)

        self.pointList = []

        # self.Frame = QFrame()
        self.labelPointVideo = QLabel("Dummy replacement for image")
        # self.labelPointVideo.setText("Dummy replacement for image")
        # self.labelPointVideo.set(True)
        # Prints position on label could be used for position on image to track points
        self.labelPointVideo.mousePressEvent = lambda event: self.locationInImage(event)
        # self.labelPointVideo.mousePressEvent = lambda event: self.pointList.append(event.pos())
        self.labelPointVideo.setStyleSheet("QLabel {background-color: grey; color: black;}")
        # self.labelPointVideo.mousePressEvent() = self.locationInImage
        # self.locationInImage(self.labelPointVideo.mousePressEvent())
        # self.Frame.show()

        self.labelPointList = QLabel("")
        

        self.tabPointSelection.layout.addWidget(self.labelPointVideo, alignment=QtCore.Qt.AlignCenter)
        self.tabPointSelection.layout.addWidget(self.labelPointList, alignment=QtCore.Qt.AlignCenter)
        self.tabPointSelection.setLayout(self.tabPointSelection.layout)
        # tab tabPointSelection end





        # tab tabProcess 
        self.tabProcess.layout = QVBoxLayout()
        
        # self.btnCreateProj = QPushButton("Create Project")
        # self.btnCreateProj.clicked.connect(self.Create_DLC_Project)
        # self.btnCreateProj.setDisabled(True)
        # self.btnCreateProj.setStyleSheet('QPushButton {background-color: red; color: black;}')
        # self.tabProcess.layout.addWidget(self.btnCreateProj, alignment=QtCore.Qt.AlignCenter)

        self.tabProcess.setLayout(self.tabProcess.layout)


        # tab tabProcess end
        





# Need this? tabDataReview /*

        self.tabDataReview.layout = QVBoxLayout()
        self.labelVideo = QLabel()
        self.tabDataReview.layout.addWidget(self.labelVideo, alignment=QtCore.Qt.AlignCenter)

        self.displayFrameChanges = QLabel()
        self.displayFrameChanges.setText("")
        self.tabDataReview.layout.addWidget(self.displayFrameChanges, alignment=QtCore.Qt.AlignCenter)
        # Need this?*/


        self.tabDataReview.setLayout(self.tabDataReview.layout)    
  
        # Add tabs to widget
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)

      
    
    def FolderSearch(self):

        self.cwd = os.getcwd()
        # self.path = QFileDialog.getOpenFileName(self,"Open Video File",r"" + str(self.cwd),"Video Files (*.mp4)")
        self.path = QFileDialog.getExistingDirectory(self,"Open the location of the recorded video files",r"" + str(self.cwd))
        # print(self.path)
        # self.vidPath = self.path[0]

        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) !=0:
                try:
                    self.successLabel.setText('Successfully connected to  "' + str(self.path) + '"') 
                    self.btnCreateProj.setDisabled(False)
                    self.btnCreateProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')
                    try:
                        with open('config.yaml', 'r') as file:
                            info = yaml.safe_load(file)
                            if len(info) == 0:
                                x = 1/0
                    except:
                        info= {"folderPath": [],"videoPaths":[], "points":[]}
                    finally:
                         # makes sure not duplicates or has files that are within other selected files
                        pathAlreadyIn = False
                        numOfFolders = len(info["folderPath"])
                        for i in range(numOfFolders):
                            if info["folderPath"][numOfFolders -(i+1)] in (self.path):
                                pathAlreadyIn = True
                            elif self.path in (info["folderPath"][numOfFolders -(i+1)]):
                                info["folderPath"].pop(numOfFolders -(i+1))
                                
                                
                        if not pathAlreadyIn:
                            info["folderPath"].append(self.path)
                        self.listFolders.clear()
                        self.listFolders.addItems(info["folderPath"])

                        # info["folderPath"].append(self.path)
                        fileList = os.listdir(self.path)
                        for i in range(len(fileList)):
                            fileList[i] = str(self.path) + str(fileList[i])
                        info["videoPaths"] = info["videoPaths"] + fileList
                        self.uploadVideoLabel.setText("")
                        
                    with open('config.yaml', 'w') as file:
                        yaml.dump(info,file,default_flow_style=False)   
                except:
                    print("erroorr")
                    self.successLabel.setText("Issue loading folder")
            else:
                self.successLabel.setText("Failed to selecting folder")  
        except:
            self.successLabel.setText("Failed to selecting folder")
    
    def FolderSearchField(self):
        
        self.cwd = os.getcwd()
        # self.path = QFileDialog.getOpenFileName(self,"Open Video File",r"" + str(self.cwd),"Video Files (*.mp4)")
        self.path = self.searchField.text()
        # print(self.path)
        # self.vidPath = self.path[0]

        try:
            # Checksif path exist and then cheanges interface and updates changes to yaml
            if os.path.exists(self.path):
                try:
                    try:
                        self.path = self.path.replace("\\","/")
                        with open('config.yaml', 'r') as file:
                            info = yaml.safe_load(file)
                            if len(info) == 0:
                                x = 1/0
                    except:
                        info= {"folderPath": [],"videoPaths":[], "points":[]}
                    finally:
                         # makes sure not duplicates or has files that are within other selected files
                        pathAlreadyIn = False
                        numOfFolders = len(info["folderPath"])
                        for i in range(numOfFolders):
                            if info["folderPath"][numOfFolders -(i+1)] in (self.path):
                                pathAlreadyIn = True
                            elif self.path in (info["folderPath"][numOfFolders -(i+1)]):
                                info["folderPath"].pop(numOfFolders -(i+1))
                                
                                
                        if not pathAlreadyIn:
                            info["folderPath"].append(self.path)
                        self.listFolders.clear()
                        self.listFolders.addItems(info["folderPath"])


                        # self.successLabel.setText('Connected  "' + str(self.path) + '"') #dont need any longer I think
                        self.btnCreateProj.setDisabled(False)
                        self.btnCreateProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')
                        
                        # dont think we need video path
                        if not pathAlreadyIn:
                            fileList = os.listdir(self.path)
                            for i in range(len(fileList)):
                                fileList[i] = str(self.path) + str(fileList[i])
                            info["videoPaths"] = info["videoPaths"] + fileList
                        self.uploadVideoLabel.setText("")
                        
                       
                        
                    with open('config.yaml', 'w') as file:
                        yaml.dump(info,file,default_flow_style=False)   
                except:
                    self.successLabel.setText("Issue loading folder")
            else:
                self.successLabel.setText("Invalid Path")  
        except:
            self.successLabel.setText("Error???")

    def Create_DLC_Project(self):
        # Place Holder
        sender = self.sender()
        print(sender.text() + ' was pressed')
        self.pop = self.show_popup()
        self.pop.show()
        # info= {"folderPath": [],"videoPaths":[], "points":[]}
        # with open('config.yaml', 'w') as file:
        #     yaml.dump(info,file,default_flow_style=False)  
        # was going to have it so it cleared the yaml file and poped up message before it cleared

    def Open_DLC_Project(self):
        # Place Holder
        sender = self.sender()
        print(sender.text() + ' was pressed')
        self.pop = self.show_popup()
        self.pop.show()
    #    pop up not yet connected to choices

    def locationInImage(self,event):
        pos = str(event.pos())
        pos = pos.strip("PyQt5.QtCore.Qpoint")
        pos = pos.strip("()")
        if len(pos) == 0:
            cord = [0,0]
        else:
            cord = pos.split(", ")
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
        self.pointList.append(cord)  
        try:
            # updates changes to yaml
            with open('config.yaml', 'r') as file:
                info = yaml.safe_load(file)
                if len(info) == 0:
                    x = 1/0
        except:
            info= {"folderPath": [],"videoPaths":[], "points":[]}
            # info = dict(points=[])
            
        finally:

            info["points"].append(cord)
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False)   

        string = str(cord).replace("[","(")
        string = str(string).replace("]",")")
        
        if  len(str(self.labelPointList.text())) == 0:
            self.labelPointList.setText(string)
        else:
            self.labelPointList.setText(str(self.labelPointList.text()) + " , " + string)
        # self.labelPointList = QLabel(str(self.pointList))

    def show_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Warning")
        msg.setText("Previously saved project may be deleted\nWould you like to proceed?")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        

        msg.setDetailedText("may overide yaml file if stored in same location")

        msg.buttonClicked.connect(self.popup_button)
        return msg

    def popup_button(self, i):
        print(i.text())
        # not yet connected to actual yer or no

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
