import sys
import os
import cv2
import time
import yaml

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMessageBox

def openYaml():
    """Opens yaml file if file is messed with resets it to generic if not returns yaml info"""
    try:
        with open('config.yaml', 'r') as file:
            info = yaml.safe_load(file)
            if len(info) != 9:
                x = 1/0
    except:
        info= {"folderPath": "","DLCfolderPath": "","videoPaths":[],"DLCvideoPaths":[], "points":[],"BoxHeight":"","BoxWidth":"","Name":"","Path":""}
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
    return info
# Creating the main window
class App(QMainWindow):
    def __init__(self):
        super().__init__()
        self.title = "Andre, Argel & Aidan's amazingly awesome array alignment"
        self.left = 0
        self.top = 0
        self.width = 300
        self.height = 200
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        self.tab_widget = MyTabWidget(self)
        self.setCentralWidget(self.tab_widget)
  
        self.show()


# Creating tab widgets
class MyTabWidget(QWidget):
    def __init__(self, parent):
        super(QWidget, self).__init__(parent)
        self.layout = QVBoxLayout(self)

        self.startTab = QTabWidget()
        self.tabCreateOrLoad = QWidget()
        self.startTab.resize(300, 200)

        # Initialize tab screen
        self.tabCreate = QWidget()
        self.tabLoad = QWidget()
        self.tabFolderDisplay = QWidget()
        self.tabPointSelection = QWidget()
        self.tabProcess = QWidget()
        self.tabScoring = QWidget()
        self.tabValidation = QWidget()
        # self.tabDataCompare = QWidget()
       
        self.path = ""
        self.vidPath = ""
        self.cmd = ""
        self.title =""
        self.framechanges = 0
  
        # Add tabs
        self.startTab.addTab(self.tabCreateOrLoad, "Load/Create")
        

        self.startTab.setStyleSheet("""
                        QTabBar::tab {
                            background-color: silver;
                            color: black;
                            }
                        QTabBar::tab:selected { 
                            background-color: white;
                            color: black; 
                            }
                            """)

        # self.tabs.addTab(self.tabDataCompare, "Compare")
  
        # load or create tab
        self.tabCreateOrLoad.layout = QHBoxLayout()
        self.btnCreateProj = QPushButton("Create Project")
        self.btnCreateProj.clicked.connect(self.Create_DLC_Project)
        # self.btnCreateProj.setDisabled(True)
        self.btnCreateProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')
        self.tabCreateOrLoad.layout.addWidget(self.btnCreateProj)

        self.btnOpenProj = QPushButton("Open Project")
        self.btnOpenProj.clicked.connect(self.Open_DLC_Project)
        # self.btnOpenProj.setDisabled(True)
        self.btnOpenProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')
     
        self.tabCreateOrLoad.layout.addWidget(self.btnOpenProj)

        self.tabCreateOrLoad.setLayout(self.tabCreateOrLoad.layout)

        self.tabCreate.layout = QGridLayout()

        
        self.labelName = QLabel("Project Name:")
        

        self.projNameField = QLineEdit()
        self.projNameField.setPlaceholderText("Enter the Project Name")
        self.projNameField.returnPressed.connect(self.StoreProjName) 

        self.labelProjPath = QLabel("Project Path:")

        self.projLocField = QLineEdit()
        self.projLocField.setPlaceholderText("Enter the project path")
        self.projLocField.returnPressed.connect(self.StoreProjLocation) 
        
        self.btnProjPath = QPushButton("Project Path")
        self.btnProjPath.clicked.connect(self.PathSearch)

        self.btnCreate = QPushButton("Create Project")
        self.btnCreate.clicked.connect(self.toNext)

        self.tabCreate.layout.addWidget(self.labelName,0,0,1,1)   
        self.tabCreate.layout.addWidget(self.projNameField,0,1,1,3)
        self.tabCreate.layout.addWidget(self.labelProjPath,1,0,1,1)
        self.tabCreate.layout.addWidget(self.projLocField,1,1,1,2)   
        self.tabCreate.layout.addWidget(self.btnProjPath,1,3,1,1)
        self.tabCreate.layout.addWidget(self.btnCreate,2,0,1,4)

        self.tabCreate.setLayout(self.tabCreate.layout) 
        
        self.tabLoad.layout = QGridLayout()
        self.labelProjPathv2 = QLabel("Project Path:")

        self.projLocFieldv2 = QLineEdit()
        self.projLocFieldv2.setPlaceholderText("Enter the project path")
        self.projLocFieldv2.returnPressed.connect(self.StoreProjLocationv2) 
        
        self.btnProjPathv2 = QPushButton("Project Path")
        self.btnProjPathv2.clicked.connect(self.PathSearch)

        self.btnLoad = QPushButton("Load Project")
        self.btnLoad.clicked.connect(self.toNext)

      
        self.tabLoad.layout.addWidget(self.labelProjPathv2,0,0,1,1)
        self.tabLoad.layout.addWidget(self.projLocFieldv2,0,1,1,2)   
        self.tabLoad.layout.addWidget(self.btnProjPathv2,0,3,1,1)
        self.tabLoad.layout.addWidget(self.btnLoad,1,0,1,4)

        self.tabLoad.setLayout(self.tabLoad.layout) 

# Still connected to previous settings need to reconnect for new purpose

        # load or create tab


        # Create second tab
        self.tabFolderDisplay.layout = QGridLayout()

        self.labelVideoFolder = QLabel()
        self.labelVideoFolder.setText("Video Folder")

        self.searchField = QLineEdit()
        self.searchField.setPlaceholderText("Enter Folder Path")
        self.searchField.returnPressed.connect(self.FolderSearchField) 
# Folder search function may have to be changed maybe to something involving yaml for opening folder (not new)
        
        self.btnSearchVideoFolder = QPushButton("OPEN")
        self.btnSearchVideoFolder.clicked.connect(self.FolderSearch)

        self.labelDLCVideoFolder = QLabel()
        self.labelDLCVideoFolder.setText("DeepLabCut Analysis Folder")

        self.searchFieldDLC = QLineEdit()
        self.searchFieldDLC.setPlaceholderText("Enter Folder Path")
        self.searchFieldDLC.returnPressed.connect(self.FolderSearchField) 

        self.btnSearchVideoDLCFolder = QPushButton("OPEN")
        self.btnSearchVideoDLCFolder.clicked.connect(self.FolderSearch)

        self.labelVidToDLC = QLabel()
        self.labelVidToDLC.setText("Video to DLC Label Matching")

        self.listVideoFolders = QListWidget()
        
        self.labelListVideoTitle = QLabel()
        self.labelListVideoTitle.setText("Videos")

        self.labelListDLCTitle = QLabel()
        self.labelListDLCTitle.setText("DeepLabCut Files")

        info = openYaml()
 
        if len(info["videoPaths"]) != self.listVideoFolders.count:
            self.listVideoFolders.addItems(info["videoPaths"])
        

        self.listDLCVideoFolders = QListWidget()
        if len(info["DLCvideoPaths"]) != self.listDLCVideoFolders.count:
            self.listDLCVideoFolders.addItems(info["DLCvideoPaths"])

        self.tabFolderDisplay.layout.addWidget(self.labelVideoFolder,0,0,1,4, alignment=QtCore.Qt.AlignCenter)   
        self.tabFolderDisplay.layout.addWidget(self.searchField,1,0,1,3)
        self.tabFolderDisplay.layout.addWidget(self.btnSearchVideoFolder,1,3,1,1)
        self.tabFolderDisplay.layout.addWidget(self.labelDLCVideoFolder,2,0,1,4, alignment=QtCore.Qt.AlignCenter)   
        self.tabFolderDisplay.layout.addWidget(self.searchFieldDLC,3,0,1,3)
        self.tabFolderDisplay.layout.addWidget(self.btnSearchVideoDLCFolder,3,3,1,1)
        self.tabFolderDisplay.layout.addWidget(self.labelVidToDLC,4,0,1,4, alignment=QtCore.Qt.AlignCenter) 
        self.tabFolderDisplay.layout.addWidget(self.labelListVideoTitle,5,0,1,2, alignment=QtCore.Qt.AlignCenter)
        self.tabFolderDisplay.layout.addWidget(self.labelListDLCTitle,5,2,1,2, alignment=QtCore.Qt.AlignCenter)  
        self.tabFolderDisplay.layout.addWidget(self.listVideoFolders,6,0,1,2)
        self.tabFolderDisplay.layout.addWidget(self.listDLCVideoFolders,6,2,1,2)

        self.tabFolderDisplay.setLayout(self.tabFolderDisplay.layout)

        
        # tab 2 end

        #tab 3 start
        self.tabPointSelection.layout = QGridLayout()
        
        self.labelBoxWidth = QLabel()
        self.labelBoxWidth.setSizePolicy(30,10)
        self.labelBoxWidth.setFixedHeight(10)
        self.labelBoxWidth.setText("Box Width [mm]:")

        self.FieldBoxWidth = QLineEdit()
        self.FieldBoxWidth.setPlaceholderText("Enter the box width in mm")
        self.FieldBoxWidth.returnPressed.connect(self.boxWidthSave) 

        self.labelBoxHeight = QLabel()
        self.labelBoxHeight.setSizePolicy(30,10)
        self.labelBoxHeight.setFixedHeight(10)
        self.labelBoxHeight.setText("Box Height [mm]:")

        self.FieldBoxHeight = QLineEdit()
        self.FieldBoxHeight.setPlaceholderText("Enter the box height in mmm")
        self.FieldBoxHeight.returnPressed.connect(self.boxHeightSave) 

        self.btnCreateSchema = QPushButton("CREATE SCHEMA")
        self.btnCreateSchema.clicked.connect(self.placeHodlerBtn)

        self.btnRegisterCorners = QPushButton("REGISTER CORNERS")
        self.btnRegisterCorners.clicked.connect(self.placeHodlerBtn)

        self.btnVisualizeRegistrations = QPushButton("Visualize REGISTRATIONS")
        self.btnVisualizeRegistrations.clicked.connect(self.placeHodlerBtn)

        self.ComboVidMenu = QComboBox()
        self.ComboVidMenu.addItems(info["videoPaths"])

        self.labelImageOri = QLabel()
        self.labelImageOri.setText("Original Image Place Holder")

        self.labelImageAlt = QLabel()
        self.labelImageAlt.setText("Altered Image Place Holder")


        self.tabPointSelection.layout.addWidget(self.labelBoxWidth,0,0,1,2)
        self.tabPointSelection.layout.addWidget(self.labelBoxHeight,0,2,1,2)      
        self.tabPointSelection.layout.addWidget(self.FieldBoxWidth,1,0,1,2)
        self.tabPointSelection.layout.addWidget(self.FieldBoxHeight,1,2,1,2)
        self.tabPointSelection.layout.addWidget(self.btnCreateSchema,2,0,1,1)
        self.tabPointSelection.layout.addWidget(self.btnRegisterCorners,2,1,1,1)
        self.tabPointSelection.layout.addWidget(self.btnVisualizeRegistrations,2,2,1,1)
        self.tabPointSelection.layout.addWidget(self.ComboVidMenu,2,3,1,1)
        self.tabPointSelection.layout.addWidget(self.labelImageOri,3,0,1,2)
        self.tabPointSelection.layout.addWidget(self.labelImageAlt,3,2,1,2)

        self.tabPointSelection.setLayout(self.tabPointSelection.layout)
        #tab 3 end

        # scoring tab start
        self.tabScoring.layout = QGridLayout()

        self.btnScoreVid = QPushButton("SCORE VIDEOS")
        self.btnScoreVid.clicked.connect(self.placeHodlerBtn)

        self.btnCreateVis = QPushButton("CREATE VISUALS")
        self.btnCreateVis.clicked.connect(self.placeHodlerBtn)

        self.labeltitleVisualScoring = QLabel()
        self.labeltitleVisualScoring.setText("Visualizations of Scoring Parameters and Results")

        self.labelImageAltScore = QLabel()
        self.labelImageAltScore.setText("Altered Image Place Holder")

        self.tabScoring.layout.addWidget(self.btnScoreVid,0,0,1,2)
        self.tabScoring.layout.addWidget(self.btnCreateVis,0,2,1,2)
        self.tabScoring.layout.addWidget(self.labeltitleVisualScoring,1,0,1,4, alignment=QtCore.Qt.AlignCenter) 
        self.tabScoring.layout.addWidget(self.labelImageAltScore,2,0,1,4) 

        self.tabScoring.setLayout(self.tabScoring.layout)
        #tab 3 end
        # scoring tab end


        # tab tabPointSelection

        self.tabProcess.layout = QVBoxLayout()
        self.instructionsPointsLabel = QLabel()
        self.instructionsPointsLabel.setText("Please select the points you wish to use in each of your videos")
        self.tabProcess.layout.addWidget(self.instructionsPointsLabel, alignment=QtCore.Qt.AlignCenter)

        self.pointList = []

        # self.Frame = QFrame()
        self.labelPointVideo = QLabel("Dummy replacement for image")
        # self.labelPointVideo.setText("Dummy replacement for image")
        # self.labelPointVideo.set(True)
        # Prints position on label could be used for position on image to track points
        self.labelPointVideo.mousePressEvent = lambda event: self.locationInImage(event)
        # self.labelPointVideo.mousePressEvent = lambda event: self.pointList.append(event.pos())
        self.labelPointVideo.setStyleSheet("QLabel {background-color: grey; color: black;}")
        # self.labelPointVideo.mousePressEvent() = self.locationInImage
        # self.locationInImage(self.labelPointVideo.mousePressEvent())
        # self.Frame.show()

        self.labelPointList = QLabel("")
        

        self.tabProcess.layout.addWidget(self.labelPointVideo, alignment=QtCore.Qt.AlignCenter)
        self.tabProcess.layout.addWidget(self.labelPointList, alignment=QtCore.Qt.AlignCenter)
        self.tabProcess.setLayout(self.tabProcess.layout)
        # tab tabPointSelection end


        # tab tabProcess 
        
        
        # self.btnCreateProj = QPushButton("Create Project")
        # self.btnCreateProj.clicked.connect(self.Create_DLC_Project)
        # self.btnCreateProj.setDisabled(True)
        # self.btnCreateProj.setStyleSheet('QPushButton {background-color: red; color: black;}')
        # self.tabProcess.layout.addWidget(self.btnCreateProj, alignment=QtCore.Qt.AlignCenter)

        self.tabProcess.setLayout(self.tabProcess.layout)


        # tab tabProcess end
        


# Need this? tabValidation /*

        self.tabValidation.layout = QGridLayout()
        self.labelVideo = QLabel()
       

        self.labelValidationVideoHeading = QLabel()
        self.labelValidationVideoHeading.setText("Video")

        self.labelValidationFeatureHeading = QLabel()
        self.labelValidationFeatureHeading.setText("Not clear how to do Features")

        self.listVideoFoldersValidation = QListWidget()
        if len(info["videoPaths"]) != self.listVideoFoldersValidation.count:
            self.listVideoFoldersValidation.addItems(info["videoPaths"])


        self.labelValidationTimeHeading = QLabel()
        self.labelValidationTimeHeading.setText("Time (s)")

        self.FieldTimeValidation = QLineEdit()
        self.FieldTimeValidation.setPlaceholderText("Enter Time")
        self.FieldTimeValidation.returnPressed.connect(self.placeHodlerBtn) 

        self.ComboVidValidationMenu = QComboBox()
        self.ComboVidValidationMenu.addItems(info["videoPaths"])

        self.PlayBackSpeedValidationMenu = QComboBox()
        self.PlayBackSpeedValidationMenu.addItems(["0.5","1","2","5","10","30"])
        
        
        self.labelVideoValidation = QLabel()
        self.labelVideoValidation.setText("Place Holder for Video")

        self.tabValidation.layout.addWidget(self.labelValidationVideoHeading,0,0,1,2)
        self.tabValidation.layout.addWidget(self.labelValidationFeatureHeading,0,2,1,2)
        self.tabValidation.layout.addWidget(self.listVideoFoldersValidation,1,0,2,4) 
        self.tabValidation.layout.addWidget(self.labelValidationTimeHeading,5,2,1,1, alignment=QtCore.Qt.AlignCenter)
        self.tabValidation.layout.addWidget(self.FieldTimeValidation,6,2,1,1) 
        self.tabValidation.layout.addWidget(self.ComboVidValidationMenu,5,3,1,1) 
        self.tabValidation.layout.addWidget(self.PlayBackSpeedValidationMenu,6,3,1,1) 
        self.tabValidation.layout.addWidget(self.labelVideoValidation,5,0,3,2)
        
        self.tabValidation.setLayout(self.tabValidation.layout)    
  
        # Add tabs to widget
        self.layout.addWidget(self.startTab)
        self.setLayout(self.layout)

      
    
    def FolderSearch(self):
        """When button is clicked will allow user to search explorer for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(self,"Open the location of the recorded video files",r"" + str(self.cwd))
        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) !=0:
                info = openYaml()
                info["folderPath"] = self.path
                    
                fileList = os.listdir(self.path)
                x = len(fileList)
                for i in range(x):
                    if not fileList[x-(i+1)].endswith(".mp4"):
                        fileList.pop(x-(i+1))
                info["videoPaths"] = fileList
                       
                with open('config.yaml', 'w') as file:
                    yaml.dump(info,file,default_flow_style=False)   
                
                self.yamlUpdateUI()
   
            else:
                print("error 5")
        except:
            print("error 4")
    
    def FolderSearchField(self):
        """When enter is pressed will check if path is valid for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = self.searchField.text()
        try:
            # Checksif path exist and then cheanges interface and updates changes to yaml
            if os.path.exists(self.path):
                self.path = self.path.replace("\\","/")
                info = openYaml()
                   
                info["folderPath"] = str(self.path)
                fileList = os.listdir(self.path)
                x = len(fileList)
                       
                for i in range(x):
                    if not fileList[x-(i+1)].endswith(".mp4"):
                        fileList.pop(x-(i+1))

                info["videoPaths"] = fileList
                                     
                with open('config.yaml', 'w') as file:
                    yaml.dump(info,file,default_flow_style=False) 
                   
                self.yamlUpdateUI()  

            else:
                print("error 2")
        except:
            print("error 1")

    def yamlUpdateUI(self):
        """Will take the info from the config file and update the UI"""
        info = openYaml()

        
        if len(info["folderPath"]) != 0:
            self.searchField.setText("")
            self.searchField.setPlaceholderText(info["folderPath"])
        else:
            self.searchField.setPlaceholderText("Enter Folder Path")

        if len(info["DLCfolderPath"]) != 0:
            self.searchFieldDLC.setText("")
            self.searchFieldDLC.setPlaceholderText(info["DLCfolderPath"])
        else:
            self.searchFieldDLC.setPlaceholderText("Enter Folder Path")
        
        self.listVideoFolders.clear()
        self.listVideoFolders.addItems(info["videoPaths"])

        self.listDLCVideoFolders.clear()
        self.listDLCVideoFolders.addItems(info["DLCvideoPaths"])

        self.ComboVidMenu.clear()
        self.ComboVidMenu.addItems(info["videoPaths"])

        self.ComboVidValidationMenu.clear()
        self.ComboVidValidationMenu.addItems(info["videoPaths"])

        self.listVideoFoldersValidation.clear()
        self.listVideoFoldersValidation.addItems(info["videoPaths"])

        if len(str(info["BoxWidth"])) != 0:
            self.FieldBoxWidth.setText("")
            self.FieldBoxWidth.setPlaceholderText(str(info["BoxWidth"]))
        else:
            self.FieldBoxWidth.setPlaceholderText("Enter the box width in mm")

        if len(str(info["BoxHeight"])) != 0:
            self.FieldBoxHeight.setText("")
            self.FieldBoxHeight.setPlaceholderText(str(info["BoxHeight"]))
        else:
            self.FieldBoxHeight.setPlaceholderText("Enter the box height in mmm")

    def StoreProjName(self):
        """Will store the project name to the config file"""
        name = self.projNameField.text()  
        info = openYaml()
        info["Name"] = name
        self.projNameField.setText("")
        self.projNameField.setPlaceholderText(str(name))
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
    
    def StoreProjLocation(self):
        """Will store the project location to the config file (specific for create tab)"""
        loc = self.projLocField.text()
         
        if os.path.exists(loc):
            info = openYaml()
            info["Path"] = loc
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText(str(loc))
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText(str(loc))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 
        else:
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText("Invalid Path Name")
            
    def StoreProjLocationv2(self):
        """Will store the project location to the config file (specific for load tab)"""
        loc = self.projLocFieldv2.text()  
        if os.path.exists(loc):
            info = openYaml()
            info["Path"] = loc
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText(str(loc))
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText(str(loc))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 
        else:
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText("Invalid Path Name")


    def PathSearch(self):
        """ button to store the project location to the config file (for both create and load tabs)"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(self,"Open the location of the folder",r"" + str(self.cwd))
        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) !=0:
                    info = openYaml()
                    info["Path"] = self.path
                    self.projLocField.setPlaceholderText(self.path)
                    self.projLocFieldv2.setPlaceholderText(self.path)
                    with open('config.yaml', 'w') as file:
                        yaml.dump(info,file,default_flow_style=False)   
                    
        except:
            print("Failed to choose valid path")

    def boxWidthSave(self):
        """Will store the box width to the config file (specific for choose points tab)"""
        bw = self.FieldBoxWidth.text()
        # try:
        if True:
            eval(bw + "+0")
            bw = float(bw)
            info = openYaml()
            info["BoxWidth"] = bw
            self.FieldBoxWidth.setText("")
            self.FieldBoxWidth.setPlaceholderText(str(bw))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 

        # except:
        #     self.FieldBoxWidth.setText("Invalid Entry")
    
    def boxHeightSave(self):
        """Will store the box height to the config file (specific for choose points tab)"""
        bh = self.FieldBoxHeight.text()
        try:
            eval(bh + "+0")
            bh = float(bh)
            info = openYaml()
            info["BoxHeight"] = bh
            self.FieldBoxHeight.setText("")
            self.FieldBoxHeight.setPlaceholderText(str(bh))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 

        except:
            self.FieldBoxHeight.setText("Invalid Entry")

    def placeHodlerBtn(self):
        sender = self.sender()
        print(sender.text() + ' was pressed')

    def Create_DLC_Project(self):
        """When pressed will update tabs and start the process for creating a new project including clearing config file"""
        try:
            self.startTab.removeTab(1)
        except:
            pass
        self.startTab.addTab(self.tabCreate,"Create")
        # Place Holder
        sender = self.sender()
        print(sender.text() + ' was pressed')
        self.pop = self.show_popup()
        self.pop.show()
        # info= {"folderPath": [],"DLCfolderPath": [],"videoPaths":[], "points":[]}
        # with open('config.yaml', 'w') as file:
        #     yaml.dump(info,file,default_flow_style=False) 
        # was going to have it so it cleared the yaml file and poped up message before it cleared
        
        # self.layout.remove(self.startTab)
        # QObjectCleanupHandler().add(self.layout())
        
        # q = QWidget().setLayout(self.layout())
        # del q
        # layout = QGridLayout(self)
        
        
        # self.layout2 = QVBoxLayout(self)
        # self.layout2.addWidget(self.tabs)
        # print("3")
        # self.setLayout(self.layout2)

    def Open_DLC_Project(self):
        """When pressed will update tabs and start the process for loading a existing project"""
        try:
            self.startTab.removeTab(1)
        except:
            pass
        self.startTab.addTab(self.tabLoad,"Load")
        # Place Holder
        sender = self.sender()
        print(sender.text() + ' was pressed')
        self.pop = self.show_popup()
        self.pop.show()
    #    pop up not yet connected to choices
       
        

    def locationInImage(self,event):
        """When pressed will save place in image clicked"""
        pos = str(event.pos())
        pos = pos.strip("PyQt5.QtCore.Qpoint")
        pos = pos.strip("()")
        if len(pos) == 0:
            cord = [0,0]
        else:
            cord = pos.split(", ")
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
        self.pointList.append(cord)  
        info = openYaml()

        info["points"].append(cord)
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False)   

        string = str(cord).replace("[","(")
        string = str(string).replace("]",")")
        
        if  len(str(self.labelPointList.text())) == 0:
            self.labelPointList.setText(string)
        else:
            self.labelPointList.setText(str(self.labelPointList.text()) + " , " + string)
        # self.labelPointList = QLabel(str(self.pointList))
    
    def toNext(self):
        """Will continue from the create or load project button and will update tabs to move to the rest"""
        try:
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        self.startTab.addTab(self.tabProcess, "Junk?")



    def show_popup(self):
        """pop up """
        msg = QMessageBox()
        msg.setWindowTitle("Warning")
        msg.setText("Previously saved project may be deleted\nWould you like to proceed?")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        
        msg.setDetailedText("may overide yaml file if stored in same location")

        msg.buttonClicked.connect(self.popup_button)
        return msg

    def popup_button(self, i):
        """to connect to the pop up but doesnt seem to work not really important """
        print(i.text())
        # not yet connected to actual yer or no

    
        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
