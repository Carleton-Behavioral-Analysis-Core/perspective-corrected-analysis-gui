import sys
import os
import cv2
import time
import yaml
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

# from PyQt5.QtWidgets import QApplication, QTableView
# from PyQt5.QtCore import QAbstractTableModel, Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMessageBox

def openYaml(rewrite=True):
    """Opens yaml file if file is messed with resets it to generic if not returns yaml info"""
    try:
    # if True:
        with open('config.yaml', 'r') as file:
            info = yaml.safe_load(file)
            # print(len(info))
            if len(info) != 11:
                x = 1/0
    except:
    # if False:
        if rewrite:
            print("rewrite")
            info= {"folderPath": "","DLCfolderPath": "","videoPaths":[],"DLCvideoPaths":[], "points":[],"BoxHeight":"","BoxWidth":"","Name":"","Path":"","numFeatures":"2",
                "data":
                {' Videos':[],
                    'Feature 1': [],
                    'Feature 2': []}}
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 
    return info

class pandasModel(QAbstractTableModel):
# https://learndataanalysis.org/display-pandas-dataframe-with-pyqt5-qtableview-widget/ Creatng data frame table
    def __init__(self, data):
        QAbstractTableModel.__init__(self)
        self._data = data
        
    def rowCount(self, parent=None):
        return self._data.shape[0]

    def columnCount(self, parnet=None):
        return self._data.shape[1]

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
        return None

    def headerData(self, col, orientation, role):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self._data.columns[col]
        return None


# Creating the main window
class App(QMainWindow):
    def __init__(self):
        super().__init__()
        self.title = "Andre, Argel & Aidan's amazingly awesome array alignment"
        self.left = 0
        self.top = 0
        self.width = 300
        self.height = 200
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        self.tab_widget = MyTabWidget(self)
        self.setCentralWidget(self.tab_widget)
  
        self.show()


# Creating tab widgets
class MyTabWidget(QWidget):
    def __init__(self, parent):
        super(QWidget, self).__init__(parent)
        self.layout = QVBoxLayout(self)

        self.startTab = QTabWidget()
        self.tabCreateOrLoad = QWidget()
        self.startTab.resize(300, 200)

        # Initialize tab screen
        self.tabCreate = QWidget()
        self.tabLoad = QWidget()
        self.tabFolderDisplay = QWidget()
        self.tabPointSelection = QWidget()
        self.tabProcess = QWidget()
        self.tabScoring = QWidget()
        self.tabValidation = QWidget()
        self.tabRegisterCorners = QWidget()
        
        # Dont think I need most of these
        self.path = ""
        self.vidPath = ""
        self.cmd = ""
        self.title =""
        self.framechanges = 0
        info = openYaml()

        # Add tabs
        self.startTab.addTab(self.tabCreateOrLoad, "Load/Create")
        
        # Styles
        self.startTab.setStyleSheet("""
                        QTabBar::tab {
                            background-color: silver;
                            color: black;
                            }
                        QTabBar::tab:selected { 
                            background-color: white;
                            color: black; 
                            }
                            """)

 
        # load or create tab
        self.tabCreateOrLoad.layout = QHBoxLayout()


        self.btnCreateProj = QPushButton("Create Project")
        self.btnCreateProj.clicked.connect(self.Create_DLC_Project)
        self.btnCreateProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')
        

        self.btnOpenProj = QPushButton("Load Project")
        self.btnOpenProj.clicked.connect(self.Open_DLC_Project)
        self.btnOpenProj.setStyleSheet('QPushButton {background-color: lime; color: black;}')

        self.tabCreateOrLoad.layout.addWidget(self.btnCreateProj)
        self.tabCreateOrLoad.layout.addWidget(self.btnOpenProj)

        self.tabCreateOrLoad.setLayout(self.tabCreateOrLoad.layout)


        # Create taab
        self.tabCreate.layout = QGridLayout()

        
        self.labelName = QLabel("Project Name:")
        
        self.projNameField = QLineEdit()
        self.projNameField.setPlaceholderText("Enter the Project Name")
        self.projNameField.returnPressed.connect(self.StoreProjName) 

        self.labelProjPath = QLabel("Project Path:")

        self.projLocField = QLineEdit()
        self.projLocField.setPlaceholderText("Enter the project path")
        self.projLocField.returnPressed.connect(self.StoreProjLocation) 
        
        self.btnProjPath = QPushButton("Project Path")
        self.btnProjPath.clicked.connect(self.PathSearch)

        self.btnCreate = QPushButton("Create Project")
        self.btnCreate.clicked.connect(self.toNext)

        self.createhelplabel = QLabel("")

        self.tabCreate.layout.addWidget(self.labelName,0,0,1,1)   
        self.tabCreate.layout.addWidget(self.projNameField,0,1,1,3)
        self.tabCreate.layout.addWidget(self.labelProjPath,1,0,1,1)
        self.tabCreate.layout.addWidget(self.projLocField,1,1,1,2)   
        self.tabCreate.layout.addWidget(self.btnProjPath,1,3,1,1)
        self.tabCreate.layout.addWidget(self.btnCreate,2,0,1,4)
        self.tabCreate.layout.addWidget(self.createhelplabel,3,0,1,4)

        self.tabCreate.setLayout(self.tabCreate.layout) 
        

        # Load tab
        self.tabLoad.layout = QGridLayout()


        self.labelProjPathv2 = QLabel("Project Path:")

        self.projLocFieldv2 = QLineEdit()
        self.projLocFieldv2.setPlaceholderText("Enter the project path")
        self.projLocFieldv2.returnPressed.connect(self.StoreProjLocationv2) 
        
        self.btnProjPathv2 = QPushButton("Project Path")
        self.btnProjPathv2.clicked.connect(self.PathSearch)

        self.btnLoad = QPushButton("Load Project")
        self.btnLoad.clicked.connect(self.toNext)

        self.loadhelplabel = QLabel("")

        self.tabLoad.layout.addWidget(self.labelProjPathv2,0,0,1,1)
        self.tabLoad.layout.addWidget(self.projLocFieldv2,0,1,1,2)   
        self.tabLoad.layout.addWidget(self.btnProjPathv2,0,3,1,1)
        self.tabLoad.layout.addWidget(self.btnLoad,1,0,1,4)
        self.tabLoad.layout.addWidget(self.loadhelplabel,2,0,1,4)

        self.tabLoad.setLayout(self.tabLoad.layout) 


        # Folder Display tab
        self.tabFolderDisplay.layout = QGridLayout()


        self.labelVideoFolder = QLabel("Video Folder")
        
        self.searchField = QLineEdit()
        if len(info["folderPath"]) != 0 and os.path.exists(str(info["folderPath"])):
            self.searchField.setPlaceholderText(str(info["folderPath"]))
        else:
            self.searchField.setPlaceholderText("Enter Folder Path")
        self.searchField.returnPressed.connect(self.FolderSearchField) 
# Folder search function may have to be changed maybe to something involving yaml for opening folder (not new)
        
        self.btnSearchVideoFolder = QPushButton("OPEN")
        self.btnSearchVideoFolder.clicked.connect(self.FolderSearch)

        self.labelDLCVideoFolder = QLabel("DeepLabCut Analysis Folder")
       
        self.searchFieldDLC = QLineEdit()
        if len(info["DLCfolderPath"]) != 0 and os.path.exists(str(info["DLCfolderPath"])):
            self.searchFieldDLC.setPlaceholderText(str(info["DLCfolderPath"]))
        else:
            self.searchFieldDLC.setPlaceholderText("Enter Folder Path")
        self.searchFieldDLC.returnPressed.connect(self.DLCFolderSearchField) 

        self.btnSearchVideoDLCFolder = QPushButton("OPEN")
        self.btnSearchVideoDLCFolder.clicked.connect(self.DLCFolderSearch)

        self.labelVidToDLC = QLabel("Video to DLC Label Matching")

        self.listVideoFolders = QListWidget()
        
        self.labelListVideoTitle = QLabel("Videos")
       
        self.labelListDLCTitle = QLabel("DeepLabCut Files")
        # print((info["data"][" Videos"]))
        if len(info["data"][" Videos"]) != 0:
            self.listVideoFolders.addItems(info["data"][" Videos"])
        

        self.listDLCVideoFolders = QListWidget()
        if len(info["DLCvideoPaths"]) != 0:
            self.listDLCVideoFolders.addItems(info["DLCvideoPaths"])

        self.labelSpacer1 = QLabel("")
        self.labelSpacer2 = QLabel("")

        self.tabFolderDisplay.layout.addWidget(self.labelVideoFolder,0,0,1,4, alignment=QtCore.Qt.AlignCenter)   
        self.tabFolderDisplay.layout.addWidget(self.searchField,1,0,1,3)
        self.tabFolderDisplay.layout.addWidget(self.btnSearchVideoFolder,1,3,1,1)
        self.tabFolderDisplay.layout.addWidget(self.labelSpacer1,2,0,1,4, alignment=QtCore.Qt.AlignCenter) 
        self.tabFolderDisplay.layout.addWidget(self.labelDLCVideoFolder,3,0,1,4, alignment=QtCore.Qt.AlignCenter)   
        self.tabFolderDisplay.layout.addWidget(self.searchFieldDLC,4,0,1,3)
        self.tabFolderDisplay.layout.addWidget(self.btnSearchVideoDLCFolder,4,3,1,1)
        self.tabFolderDisplay.layout.addWidget(self.labelSpacer2,5,0,1,4, alignment=QtCore.Qt.AlignCenter) 
        self.tabFolderDisplay.layout.addWidget(self.labelVidToDLC,6,0,1,4, alignment=QtCore.Qt.AlignCenter) 
        self.tabFolderDisplay.layout.addWidget(self.labelListVideoTitle,7,0,1,2, alignment=QtCore.Qt.AlignCenter)
        self.tabFolderDisplay.layout.addWidget(self.labelListDLCTitle,7,2,1,2, alignment=QtCore.Qt.AlignCenter)  
        self.tabFolderDisplay.layout.addWidget(self.listVideoFolders,8,0,1,2)
        self.tabFolderDisplay.layout.addWidget(self.listDLCVideoFolders,8,2,1,2)

        self.tabFolderDisplay.setLayout(self.tabFolderDisplay.layout)


        
        #Point selection tab 
        self.tabPointSelection.layout = QGridLayout()
        
        self.labelBoxWidth = QLabel("Box Width [mm]:")
        self.labelBoxWidth.setSizePolicy(30,10)
        self.labelBoxWidth.setFixedHeight(10)
        
        self.FieldBoxWidth = QLineEdit()
        if len(info["BoxWidth"]) != 0 and (str(info["BoxWidth"])).isnumeric():
            self.FieldBoxWidth.setPlaceholderText(str(info["BoxWidth"]))
        else:
            self.FieldBoxWidth.setPlaceholderText("Box Width in mm")
        self.FieldBoxWidth.returnPressed.connect(self.boxWidthSave) 

        self.labelBoxHeight = QLabel("Box Height [mm]:")
        self.labelBoxHeight.setSizePolicy(30,10)
        self.labelBoxHeight.setFixedHeight(10)

        self.FieldBoxHeight = QLineEdit()
        if len(info["BoxHeight"]) != 0 and (str(info["BoxHeight"])).isnumeric():
            self.FieldBoxHeight.setPlaceholderText(str(info["BoxHeight"]))
        else:
            self.FieldBoxHeight.setPlaceholderText("Box Height in mm")
        self.FieldBoxHeight.returnPressed.connect(self.boxHeightSave) 

        self.btnCreateSchema = QPushButton("1. CREATE SCHEMA")
        self.btnCreateSchema.clicked.connect(self.displayAltFrame)

        self.btnRegisterCorners = QPushButton("2. REGISTER CORNERS")
        self.btnRegisterCorners.clicked.connect(self.toRegisterCorners)

        self.btnVisualizeRegistrations = QPushButton("3. Visualize REGISTRATIONS")
        self.btnVisualizeRegistrations.clicked.connect(self.displayFrame)

        self.ComboVidMenu = QComboBox()
        self.ComboVidMenu.addItems(info["data"][" Videos"])
        # self.ComboVidMenu.clicked.connect

        self.labelImageOri = QLabel("Original Image Place Holder")

        self.labelImageAlt = QLabel("Altered Image Place Holder")


        self.tabPointSelection.layout.addWidget(self.labelBoxWidth,0,0,1,1, alignment=QtCore.Qt.AlignRight)
        self.tabPointSelection.layout.addWidget(self.labelBoxHeight,0,2,1,1, alignment=QtCore.Qt.AlignRight)      
        self.tabPointSelection.layout.addWidget(self.FieldBoxWidth,0,1,1,1)
        self.tabPointSelection.layout.addWidget(self.FieldBoxHeight,0,3,1,1)
        self.tabPointSelection.layout.addWidget(self.btnCreateSchema,2,0,1,1)
        self.tabPointSelection.layout.addWidget(self.btnRegisterCorners,2,1,1,1)
        self.tabPointSelection.layout.addWidget(self.btnVisualizeRegistrations,2,2,1,1)
        self.tabPointSelection.layout.addWidget(self.ComboVidMenu,2,3,1,1)
        self.tabPointSelection.layout.addWidget(self.labelImageOri,3,0,1,2)
        self.tabPointSelection.layout.addWidget(self.labelImageAlt,3,2,1,2)

        self.tabPointSelection.setLayout(self.tabPointSelection.layout)
       


        # scoring tab start
        self.tabScoring.layout = QGridLayout()


        self.btnScoreVid = QPushButton("SCORE VIDEOS")
        self.btnScoreVid.clicked.connect(self.placeHodlerBtn)

        self.btnCreateVis = QPushButton("CREATE VISUALS")
        self.btnCreateVis.clicked.connect(self.placeHodlerBtn)

        self.labeltitleVisualScoring = QLabel("Visualizations of Scoring Parameters and Results")

        self.labelImageAltScore = QLabel("Altered Image Place Holder")

        self.tabScoring.layout.addWidget(self.btnScoreVid,0,0,1,2)
        self.tabScoring.layout.addWidget(self.btnCreateVis,0,2,1,2)
        self.tabScoring.layout.addWidget(self.labeltitleVisualScoring,1,0,1,4, alignment=QtCore.Qt.AlignCenter) 
        self.tabScoring.layout.addWidget(self.labelImageAltScore,2,0,1,4) 

        self.tabScoring.setLayout(self.tabScoring.layout)
      


        # Validation tab
        self.tabValidation.layout = QGridLayout()


        self.labelVideo = QLabel()
       
        self.labelValidationVideoHeading = QLabel("Video")

        self.labelValidationFeatureHeading = QLabel("cool")

        self.listVideoFoldersValidation = QListWidget()
        if len(info["data"][" Videos"]) != 0:
            self.listVideoFoldersValidation.addItems(info["data"][" Videos"])
        
        self.featuresDataDisplay = QTableView()
        self.featuresDataDisplay.setModel(pandasModel(pd.DataFrame(info["data"])))
        self.featuresDataDisplay.resizeColumnsToContents()
        hheader = self.featuresDataDisplay.horizontalHeader()
        hheader.setSectionResizeMode(QHeaderView.Stretch)
        hheader.setStyleSheet("::section {background-color: grey; color: black;}")
        

        self.labelValidationTimeHeading = QLabel("Time (s)")

        self.FieldTimeValidation = QLineEdit()
        self.FieldTimeValidation.setPlaceholderText("Enter Time")
        # SHouldnt be connected to thisjust for test
        self.FieldTimeValidation.returnPressed.connect(self.displayVideo) 

        self.ComboVidValidationMenu = QComboBox()
        self.ComboVidValidationMenu.addItems(info["data"][" Videos"])

        self.PlayBackSpeedValidationMenu = QComboBox()
        self.PlayBackSpeedValidationMenu.addItems(["0.5","1","2","5","10","30"])
        
        self.labelVideoValidation = QLabel("Place Holder for Video")

        # self.tabValidation.layout.addWidget(self.labelValidationVideoHeading,0,0,1,2)
        # self.tabValidation.layout.addWidget(self.labelValidationFeatureHeading,0,2,1,2)
        # self.tabValidation.layout.addWidget(self.listVideoFoldersValidation,1,0,2,1) 
        self.tabValidation.layout.addWidget(self.featuresDataDisplay,0,0,2,5) 
        self.tabValidation.layout.addWidget(self.labelValidationTimeHeading,4,3,1,1, alignment=QtCore.Qt.AlignCenter)
        self.tabValidation.layout.addWidget(self.FieldTimeValidation,5,3,1,1) 
        self.tabValidation.layout.addWidget(self.ComboVidValidationMenu,4,4,1,1) 
        self.tabValidation.layout.addWidget(self.PlayBackSpeedValidationMenu,5,4,1,1) 
        self.tabValidation.layout.addWidget(self.labelVideoValidation,4,0,3,3)
        
        self.tabValidation.setLayout(self.tabValidation.layout) 


        # self.tabRegisterCorners
        self.tabRegisterCorners.layout = QGridLayout()


        self.ComboVidMenuCorner = QComboBox()
        self.ComboVidMenuCorner.addItems(info["data"][" Videos"])

        self.btnChangeFrame = QPushButton("Change Frame")
        self.btnChangeFrame.clicked.connect(self.displayFrameCorner)

        self.labelImageOriCorner = QLabel("Original Image Place Holder")
        self.labelImageOriCorner.mousePressEvent = lambda event: self.locationInImage(event)

        self.labelInstructions = QLabel("Either enter x y coordinates seperated\nby single space or press on image")
        # self.labelInstructions.setAlignment(alignment=QtCore.Qt.AlignCenter)

        self.labelTopLeft= QLabel("Top Left:")
        self.labelTopLeft.setFixedWidth(70)
        self.FieldTL = QLineEdit()
        self.FieldTL.setPlaceholderText("Enter Cordinate in x y form")
        # if len(info["BoxWidth"]) != 0 and (str(info["BoxWidth"])).isnumeric():
        #     self.FieldBoxWidth.setPlaceholderText(str(info["BoxWidth"]))
        # else:
        #     self.FieldBoxWidth.setPlaceholderText("Box Width in mm")
        self.FieldTL.returnPressed.connect(self.FieldPointRegistrationTL) #Prob save x

        self.labelTopRight= QLabel("Top Right:")
        self.labelTopRight.setFixedWidth(70)
        self.FieldTR = QLineEdit()
        self.FieldTR.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldTR.returnPressed.connect(self.FieldPointRegistrationTR)

        self.labelBottomRight= QLabel("Bottom Right:")
        self.labelBottomRight.setFixedWidth(70)
        self.FieldBR = QLineEdit()
        self.FieldBR.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBR.returnPressed.connect(self.FieldPointRegistrationBR)

        self.labelBottomLeft= QLabel("Bottom Left:")
        self.labelBottomLeft.setFixedWidth(70)
        self.FieldBL = QLineEdit()
        self.FieldBL.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBL.returnPressed.connect(self.FieldPointRegistrationBL)

        self.btnSetForAll = QPushButton("Set For All")
        self.btnSetForAll.clicked.connect(self.saveToAllCorner)

        self.btnClearPoints = QPushButton("Clear Points")
        self.btnClearPoints.clicked.connect(self.clearPointsCorner)

        self.btnDoneCorner = QPushButton("Done")
        self.btnDoneCorner.clicked.connect(self.DoneRegisterCornersToBack)

        self.labelImageAltCorner = QLabel("Altered Image Place Holder\nWill be visble when 4 points are selected")


        self.labelImgBL= QLabel("1")
        self.labelImgBR= QLabel("2")
        self.labelImgTL= QLabel("3")
        self.labelImgTR= QLabel("4")

        self.spacingLabel1 = QLabel("")
        self.spacingLabel2 = QLabel("")
        self.spacingLabel3 = QLabel("")
        self.spacingLabel4 = QLabel("")
        self.spacingLabel5 = QLabel("")
        self.spacingLabel6 = QLabel("")

       


        # self.tabRegisterCorners.layout.addWidget(self.ComboVidMenuCorner,0,0,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnChangeFrame,0,2,1,1)      
        # self.tabRegisterCorners.layout.addWidget(self.labelInstructions,0,3,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageOriCorner,1,0,4,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelTopLeft,1,3,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTL,1,4,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.labelTopRight,2,3,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTR,2,4,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomRight,3,3,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBR,3,4,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomLeft,4,3,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBL,4,4,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.btnSetForAll,5,4,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.btnClearPoints,5,3,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.btnDoneCorner,5,0,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageAltCorner,6,0)


        # v4
        # self.tabRegisterCorners.layout.addWidget(self.ComboVidMenuCorner,0,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.btnChangeFrame,1,5,1,3) 
        # self.tabRegisterCorners.layout.addWidget(self.spacingLabel6,1,4,1,1) 

        # self.tabRegisterCorners.layout.addWidget(self.labelInstructions,2,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgTL,0,0,1,2, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgTR,0,2,1,2, alignment=QtCore.Qt.AlignRight)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageOriCorner,1,0,4,4)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgBL,5,0,1,2, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgBR,5,2,1,2, alignment=QtCore.Qt.AlignRight)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageAltCorner,6,0,4,4)

        # self.tabRegisterCorners.layout.addWidget(self.labelTopLeft,3,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTL,3,6,1,2)
        
        # self.tabRegisterCorners.layout.addWidget(self.labelTopRight,4,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTR,4,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomRight,5,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBR,5,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomLeft,6,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBL,6,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnSetForAll,7,5,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.btnClearPoints,7,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnDoneCorner,8,5,1,3)

        # v3
        self.conjoinedLayout1 = QGridLayout()
        self.conjoinedLayout1.addWidget(self.labelImgTL,0,0,1,1, alignment=QtCore.Qt.AlignLeft)
        self.conjoinedLayout1.addWidget(self.labelImgTR,0,1,1,1, alignment=QtCore.Qt.AlignRight)

        self.conjoinedLayout1Wid = QWidget()
        self.conjoinedLayout1Wid.setLayout(self.conjoinedLayout1)

        self.conjoinedLayout2 = QGridLayout()
        self.conjoinedLayout2.addWidget(self.labelImgBL,0,0,1,1, alignment=QtCore.Qt.AlignLeft)
        self.conjoinedLayout2.addWidget(self.labelImgBR,0,1,1,1, alignment=QtCore.Qt.AlignRight)

        self.conjoinedLayout2Wid = QWidget()
        self.conjoinedLayout2Wid.setLayout(self.conjoinedLayout2)

        self.imageVerticalLayout = QVBoxLayout()
        self.imageVerticalLayout.addWidget(self.conjoinedLayout1Wid)
        self.imageVerticalLayout.addWidget(self.labelImageOriCorner)
        self.imageVerticalLayout.addWidget(self.conjoinedLayout2Wid)
        self.imageVerticalLayout.addWidget(self.labelImageAltCorner)

        self.ImageandLabelWidgt = QWidget()
        self.ImageandLabelWidgt.setLayout(self.imageVerticalLayout)

        # self.LabelsandButtonsLayout = QGridLayout()
        # self.LabelsandButtonsLayout.addWidget(self.ComboVidMenuCorner,0,0,1,2)
        # self.LabelsandButtonsLayout.addWidget(self.btnChangeFrame,0,2,1,1) 
        # self.LabelsandButtonsLayout.addWidget(self.spacingLabel6,1,0,1,3) 
        # self.LabelsandButtonsLayout.addWidget(self.labelInstructions,2,0,1,3) 
        
        # self.LabelsandButtonsLayout.addWidget(self.labelTopLeft,3,0,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.LabelsandButtonsLayout.addWidget(self.FieldTL,3,1,1,2)
        
        # self.LabelsandButtonsLayout.addWidget(self.labelTopRight,4,0,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.LabelsandButtonsLayout.addWidget(self.FieldTR,4,1,1,2)
        # self.LabelsandButtonsLayout.addWidget(self.labelBottomRight,5,0,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.LabelsandButtonsLayout.addWidget(self.FieldBR,5,1,1,2)
        # self.LabelsandButtonsLayout.addWidget(self.labelBottomLeft,6,0,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.LabelsandButtonsLayout.addWidget(self.FieldBL,6,1,1,2)
        # self.LabelsandButtonsLayout.addWidget(self.spacingLabel5,7,1,1,3)
        # self.LabelsandButtonsLayout.addWidget(self.btnSetForAll,8,0,1,1)
        # self.LabelsandButtonsLayout.addWidget(self.btnClearPoints,8,1,1,2)
        # self.LabelsandButtonsLayout.addWidget(self.btnDoneCorner,9,0,1,3)

        self.conjoinedLayout3 = QGridLayout()
        self.conjoinedLayout3.addWidget(self.ComboVidMenuCorner,0,0,1,2)
        self.conjoinedLayout3.addWidget(self.btnChangeFrame,0,2,1,1)
        self.conjoinedLayout3.addWidget(self.spacingLabel6,1,0,1,3)

        self.conjoinedLayout3Wid = QWidget()
        self.conjoinedLayout3Wid.setLayout(self.conjoinedLayout3)

        self.conjoinedLayoutTL = QGridLayout()
        self.conjoinedLayoutTL.addWidget(self.labelTopLeft,0,0,1,2)
        self.conjoinedLayoutTL.addWidget(self.FieldTL,0,2,1,1)

        self.conjoinedLayoutTLWid = QWidget()
        self.conjoinedLayoutTLWid.setLayout(self.conjoinedLayoutTL)

        self.conjoinedLayoutTR = QGridLayout()
        self.conjoinedLayoutTR.addWidget(self.labelTopRight,0,0,1,2)
        self.conjoinedLayoutTR.addWidget(self.FieldTR,0,2,1,1)

        self.conjoinedLayoutTRWid = QWidget()
        self.conjoinedLayoutTRWid.setLayout(self.conjoinedLayoutTR)

        self.conjoinedLayoutBR = QGridLayout()
        self.conjoinedLayoutBR.addWidget(self.labelBottomRight,0,0,1,2)
        self.conjoinedLayoutBR.addWidget(self.FieldBR,0,2,1,1)

        self.conjoinedLayoutBRWid = QWidget()
        self.conjoinedLayoutBRWid.setLayout(self.conjoinedLayoutBR)

        self.conjoinedLayoutBL = QGridLayout()
        self.conjoinedLayoutBL.addWidget(self.labelBottomLeft,0,0,1,2)
        self.conjoinedLayoutBL.addWidget(self.FieldBL,0,2,1,1)

        self.conjoinedLayoutBLWid = QWidget()
        self.conjoinedLayoutBLWid.setLayout(self.conjoinedLayoutBL)

        self.conjoinedLayoutBtn = QGridLayout()
        self.conjoinedLayoutBtn.addWidget(self.spacingLabel5,0,0,1,3)
        self.conjoinedLayoutBtn.addWidget(self.btnClearPoints,1,0,1,1)
        self.conjoinedLayoutBtn.addWidget(self.btnSetForAll,1,1,1,2)

        self.conjoinedLayoutBtnWid = QWidget()
        self.conjoinedLayoutBtnWid.setLayout(self.conjoinedLayoutBtn)

        self.labelsNBtnsVerticalLayout = QVBoxLayout()
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayout3Wid)
        self.labelsNBtnsVerticalLayout.addWidget(self.labelInstructions, alignment=QtCore.Qt.AlignCenter)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutTLWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutTRWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutBRWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutBLWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutBtnWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.btnDoneCorner)

        


        # self.LabelsandButtonsLayout.setVerticalSpacing(5)
        # self.LabelsandButtonsLayout.setSpacing(0)
        # self.LabelsandButtonsLayout.setContentsMargins(0,0,0,0)
        # print(self.LabelsandButtonsLayout.horizontalSpacing())
        # self.LabelsandButtonsLayout.
        self.LabelsandButtonsWidget = QWidget()
        self.LabelsandButtonsWidget.setLayout(self.labelsNBtnsVerticalLayout)

        self.wholeCornerLayout = QHBoxLayout()
        
        self.wholeCornerLayout.addWidget(self.ImageandLabelWidgt)
        self.wholeCornerLayout.addWidget(self.LabelsandButtonsWidget)
        
        

        # self.tabRegisterCorners.layout.addLayout(self.imageVerticalLayout)

        # v1
        # self.tabRegisterCorners.layout.addWidget(self.ComboVidMenuCorner,0,0,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnChangeFrame,0,2,1,2) 

        # self.tabRegisterCorners.layout.addWidget(self.labelInstructions,0,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgTL,1,0,1,2, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgTR,1,2,1,2, alignment=QtCore.Qt.AlignRight)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageOriCorner,2,0,4,4)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgBL,6,0,1,2, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgBR,6,2,1,2, alignment=QtCore.Qt.AlignRight)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageAltCorner,8,0,4,4)
    
        # self.tabRegisterCorners.layout.addWidget(self.labelTopLeft,1,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTL,1,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.spacingLabel1,2,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelTopRight,3,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTR,3,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.spacingLabel2,4,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomRight,5,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBR,5,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.spacingLabel3,6,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomLeft,7,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBL,7,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.spacingLabel4,8,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.btnSetForAll,9,5,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.btnClearPoints,9,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnDoneCorner,10,5,1,3)

        # V2
        # self.tabRegisterCorners.layout.addWidget(self.ComboVidMenuCorner,0,0,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnChangeFrame,0,2,1,2) 

        # self.tabRegisterCorners.layout.addWidget(self.labelInstructions,0,5,1,3)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgTL,1,0,1,2, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgTR,1,2,1,2, alignment=QtCore.Qt.AlignRight)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageOriCorner,2,0,4,4)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgBL,6,0,1,2, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.labelImgBR,6,2,1,2, alignment=QtCore.Qt.AlignRight)
        # self.tabRegisterCorners.layout.addWidget(self.labelImageAltCorner,8,0,4,4)

        # self.tabRegisterCorners.layout.addWidget(self.labelTopLeft,1,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTL,1,6,1,2)
        
        # self.tabRegisterCorners.layout.addWidget(self.labelTopRight,2,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldTR,2,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomRight,3,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBR,3,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.labelBottomLeft,4,5,1,1, alignment=QtCore.Qt.AlignLeft)
        # self.tabRegisterCorners.layout.addWidget(self.FieldBL,4,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnSetForAll,6,5,1,1)
        # self.tabRegisterCorners.layout.addWidget(self.btnClearPoints,6,6,1,2)
        # self.tabRegisterCorners.layout.addWidget(self.btnDoneCorner,7,5,1,3)
        
       
        





        # self.tabRegisterCorners.setLayout(self.tabRegisterCorners.layout)
        self.tabRegisterCorners.setLayout(self.wholeCornerLayout)

        # # Mess of tabs dont think are needed
        # # tab tabPointSelection
        # self.tabProcess.layout = QVBoxLayout()


        # self.instructionsPointsLabel = QLabel("Please select the points you wish to use in each of your videos")
        # self.tabProcess.layout.addWidget(self.instructionsPointsLabel, alignment=QtCore.Qt.AlignCenter)

        # self.pointList = []

        # # self.Frame = QFrame()
        # self.labelPointVideo = QLabel("Dummy replacement for image")
        # # self.labelPointVideo.setText("Dummy replacement for image")
        # # self.labelPointVideo.set(True)
        # # Prints position on label could be used for position on image to track points
        # self.labelPointVideo.mousePressEvent = lambda event: self.locationInImage(event)
        # # self.labelPointVideo.mousePressEvent = lambda event: self.pointList.append(event.pos())
        # self.labelPointVideo.setStyleSheet("QLabel {background-color: grey; color: black;}")
        # # self.labelPointVideo.mousePressEvent() = self.locationInImage
        # # self.locationInImage(self.labelPointVideo.mousePressEvent())
        # # self.Frame.show()

        # self.labelPointList = QLabel("")
        

        # self.tabProcess.layout.addWidget(self.labelPointVideo, alignment=QtCore.Qt.AlignCenter)
        # self.tabProcess.layout.addWidget(self.labelPointList, alignment=QtCore.Qt.AlignCenter)
        # self.tabProcess.setLayout(self.tabProcess.layout)
        # # tab tabPointSelection end


        # # tab tabProcess 
        
        
        # # self.btnCreateProj = QPushButton("Create Project")
        # # self.btnCreateProj.clicked.connect(self.Create_DLC_Project)
        # # self.btnCreateProj.setDisabled(True)
        # # self.btnCreateProj.setStyleSheet('QPushButton {background-color: red; color: black;}')
        # # self.tabProcess.layout.addWidget(self.btnCreateProj, alignment=QtCore.Qt.AlignCenter)

        # self.tabProcess.setLayout(self.tabProcess.layout)


        

 

        # Delete when real
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        self.startTab.addTab(self.tabRegisterCorners, "Register Corners")
        
        # self.startTab.addTab(self.tabProcess, "Junk?")
        # # delete when real
  
        # Add tabs to widget
        self.layout.addWidget(self.startTab)
        self.setLayout(self.layout)

      
    
    def FolderSearch(self):
        """When button is clicked will allow user to search explorer for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(self,"Open the location of the recorded video files",r"" + str(self.cwd))
        # try:
        if True:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) !=0:
                info = openYaml()
                info["folderPath"] = self.path
                info["videoPaths"] = ["Clear"]
                info["data"][' Videos'] = ["CLearedd"]

                fileList = os.listdir(self.path)
                x = len(fileList)
                for i in range(x):
                    if not fileList[x-(i+1)].endswith(".mp4"):
                        fileList.pop(x-(i+1))
                info["data"] = {' Videos':fileList.copy()}
                info["videoPaths"] = fileList.copy()
               
                # print(fileList)
                for i in range(len(fileList)):
                    info["videoPaths"][i] = [info["videoPaths"][i],[]]

                
         
                for j in range(int(info["numFeatures"])):
                    info["data"]["Feature %d" % (j +1)] = []
                    for i in range (len(fileList)):
                        info["data"]["Feature %d" % (j +1)].append(0)
         
                  
                with open('config.yaml', 'w') as file:
                    yaml.dump(info,file,default_flow_style=False)   
                
                self.yamlUpdateUI()
   
            else:
                print("error 5")
        # except:
        #     print("error 4")

    def DLCFolderSearch(self):
        """When button is clicked will allow user to search explorer for folder that contains DLC h5 files and updates config file"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(self,"Open the location of the recorded video files",r"" + str(self.cwd))
        # try:
        if True:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) !=0:
                info = openYaml()
                info["DLCfolderPath"] = self.path
                info["DLCvideoPaths"] = []


                fileList = os.listdir(self.path)

                x = len(fileList)
                for i in range(x):
                    if not fileList[x-(i+1)].endswith(".h5"):
                        fileList.pop(x-(i+1))
                info["DLCvideoPaths"] = fileList.copy()
               
                # print(fileList)
                
            
                  
                with open('config.yaml', 'w') as file:
                    yaml.dump(info,file,default_flow_style=False)   
                
                self.yamlUpdateUI()
   
            else:
                print("error 5")
        # except:
        #     print("error 4")
    
    def FolderSearchField(self):
        """When enter is pressed will check if path is valid for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = self.searchField.text()
        try:
            # Checksif path exist and then cheanges interface and updates changes to yaml
            if os.path.exists(self.path):
                self.path = self.path.replace("\\","/")
                info = openYaml()
                
                   
                info["folderPath"] = str(self.path)
                fileList = os.listdir(self.path)
                x = len(fileList)
                       
                for i in range(x):
                    if not fileList[x-(i+1)].endswith(".mp4"):
                        fileList.pop(x-(i+1))

                info["videoPaths"] = fileList.copy()
                for i in range(len(fileList)):
                    info["videoPaths"][i] = [info["videoPaths"][i],[]]
                
                info["data"] = {' Videos':fileList.copy()}
               
                for j in range(int(info["numFeatures"])):
                    info["data"]["Feature %d" % (j +1)] = []
                    for i in range (len(fileList)):
                        info["data"]["Feature %d" % (j +1)].append(0)
            
                    

                                     
                with open('config.yaml', 'w') as file:
                    yaml.dump(info,file,default_flow_style=False) 
                   
                self.yamlUpdateUI()  

            else:
                print("error 2")
        except:
            print("error 1")

    def DLCFolderSearchField(self):
        """When enter is pressed will check if path is valid for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = self.searchFieldDLC.text()
        try:
            # Checksif path exist and then cheanges interface and updates changes to yaml
            if os.path.exists(self.path):
                
                self.path = self.path.replace("\\","/")
                info = openYaml()        
                info["DLCfolderPath"] = str(self.path)
                fileList = os.listdir(self.path)
                x = len(fileList)
                for i in range(x):
                    if not fileList[x-(i+1)].endswith(".h5"):
                        fileList.pop(x-(i+1))
                info["DLCvideoPaths"] = fileList.copy()                      
                with open('config.yaml', 'w') as file:
                    yaml.dump(info,file,default_flow_style=False) 
                   
                self.yamlUpdateUI()  

            else:
                print("error 2")
        except:
            print("error 1")

    def yamlUpdateUI(self):
        """Will take the info from the config file and update the UI"""
        info = openYaml()

        
        if len(info["folderPath"]) != 0:
            self.searchField.setText("")
            self.searchField.setPlaceholderText(info["folderPath"])
        else:
            self.searchField.setPlaceholderText("Enter Folder Path")

        if len(info["DLCfolderPath"]) != 0:
            self.searchFieldDLC.setText("")
            self.searchFieldDLC.setPlaceholderText(info["DLCfolderPath"])
        else:
            self.searchFieldDLC.setPlaceholderText("Enter Folder Path")
        
        self.listVideoFolders.clear()
        self.listVideoFolders.addItems(info["data"][" Videos"])

        self.listDLCVideoFolders.clear()
        self.listDLCVideoFolders.addItems(info["DLCvideoPaths"])

        self.ComboVidMenu.clear()
        self.ComboVidMenu.addItems(info["data"][" Videos"])

        self.ComboVidValidationMenu.clear()
        self.ComboVidValidationMenu.addItems(info["data"][" Videos"])

        self.listVideoFoldersValidation.clear()
        self.listVideoFoldersValidation.addItems(info["data"][" Videos"])

        if len(str(info["BoxWidth"])) != 0:
            self.FieldBoxWidth.setText("")
            self.FieldBoxWidth.setPlaceholderText(str(info["BoxWidth"]))
        else:
            self.FieldBoxWidth.setPlaceholderText("Box Width in mm")

        if len(str(info["BoxHeight"])) != 0:
            self.FieldBoxHeight.setText("")
            self.FieldBoxHeight.setPlaceholderText(str(info["BoxHeight"]))
        else:
            self.FieldBoxHeight.setPlaceholderText("Box Height in mmm")

        self.featuresDataDisplay.setModel(pandasModel(pd.DataFrame(info["data"])))
        self.featuresDataDisplay.resizeColumnsToContents()

    def StoreProjName(self):
        """Will store the project name to the config file"""
        name = self.projNameField.text()  
        if len(name) !=0:
            info = openYaml()
            info["Name"] = name
            self.projNameField.setText("")
            self.projNameField.setPlaceholderText(str(name))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 
        else:
            self.projNameField.setText("")
            
    
    def StoreProjLocation(self):
        """Will store the project location to the config file (specific for create tab)"""
        loc = self.projLocField.text()
         
        if os.path.exists(loc):
            info = openYaml()
            info["Path"] = loc
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText(str(loc))
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText(str(loc))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 
        else:
            self.projLocField.setText("")
            
            
    def StoreProjLocationv2(self):
        """Will store the project location to the config file (specific for load tab)"""
        loc = self.projLocFieldv2.text()  
        if os.path.exists(loc):
            info = openYaml()
            info["Path"] = loc
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText(str(loc))
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText(str(loc))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 
        else:
            self.projLocFieldv2.setText("")
            


    def PathSearch(self):
        """ button to store the project location to the config file (for both create and load tabs)"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(self,"Open the location of the folder",r"" + str(self.cwd))
        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) !=0:
                    info = openYaml()
                    info["Path"] = self.path
                    self.projLocField.setPlaceholderText(self.path)
                    self.projLocFieldv2.setPlaceholderText(self.path)
                    with open('config.yaml', 'w') as file:
                        yaml.dump(info,file,default_flow_style=False)   
                    
        except:
            print("Failed to choose valid path")

    def boxWidthSave(self):
        """Will store the box width to the config file (specific for choose points tab)"""
        bw = self.FieldBoxWidth.text()
        # try:
        if True:
            eval(bw + "+0")
            bw = float(bw)
            info = openYaml()
            info["BoxWidth"] = bw
            self.FieldBoxWidth.setText("")
            self.FieldBoxWidth.setPlaceholderText(str(bw))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 

        # except:
        #     self.FieldBoxWidth.setText("Invalid Entry")
    
    def boxHeightSave(self):
        """Will store the box height to the config file (specific for choose points tab)"""
        bh = self.FieldBoxHeight.text()
        try:
            eval(bh + "+0")
            bh = float(bh)
            info = openYaml()
            info["BoxHeight"] = bh
            self.FieldBoxHeight.setText("")
            self.FieldBoxHeight.setPlaceholderText(str(bh))
            with open('config.yaml', 'w') as file:
                yaml.dump(info,file,default_flow_style=False) 

        except:
            self.FieldBoxHeight.setText("Invalid Entry")

    def placeHodlerBtn(self):
        """pLACE HOLDER FOR ACTUAL BUTTONS"""
        sender = self.sender()
        print(sender.text() + ' was pressed')

    def Create_DLC_Project(self):
        """When pressed will update tabs and start the process for creating a new project including clearing config file"""
        try:
            self.startTab.removeTab(1)
        except:
            pass
        self.startTab.addTab(self.tabCreate,"Create")
        self.startTab.setCurrentIndex(1)


        # wil clear config file
        # info= {"folderPath": "","DLCfolderPath": "","videoPaths":[],"DLCvideoPaths":[], "points":[],"BoxHeight":"","BoxWidth":"","Name":"","Path":"","numFeatures":"2",
        #         "data":
        #         {' Videos':[],
        #             'Feature 1': [],
        #             'Feature 2': []}}
        # with open('config.yaml', 'w') as file:
        #     yaml.dump(info,file,default_flow_style=False) 
        
        

    def Open_DLC_Project(self):
        """When pressed will update tabs and start the process for loading a existing project"""
        try:
            self.startTab.removeTab(1)
        except:
            pass
        self.startTab.addTab(self.tabLoad,"Load")
        self.startTab.setCurrentIndex(1)
        # Place Holder
        sender = self.sender()
        # print(sender.text() + ' was pressed')
        # self.pop = self.show_popup()
        # self.pop.show()
    #    pop up not yet connected to choices

    def locationInImage(self,event):
        """When pressed will save place in image clicked and append to list however points won't be adjusted for the image so may not like what is imagined"""
        pos = str(event.pos())
        pos = pos.strip("PyQt5.QtCore.Qpoint")
        pos = pos.strip("()")
        info = openYaml()
        if len(pos) == 0:
            cord = [0,0]
        else:
            cord = pos.split(", ")
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
        for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    info["videoPaths"][i][1].append(cord)
        
        

        
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 

        self.displayFrameCorner()
          

        # string = str(cord).replace("[","(")
        # string = str(string).replace("]",")")
        
        # if  len(str(self.labelPointList.text())) == 0:
        #     self.labelPointList.setText(string)
        # else:
        #     self.labelPointList.setText(str(self.labelPointList.text()) + " , " + string)
        # self.labelPointList = QLabel(str(self.pointList))
    
    def clearPointsCorner(self):
        """Clears points of the selected video"""
        info = openYaml()
        for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    info["videoPaths"][i][1] = []
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
        self.displayFrameCorner()
        
    def saveToAllCorner(self):
        """Takes the points of the currently selected image and will save the points to all the others"""
        info = openYaml()
        for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    points = info["videoPaths"][i][1] 
        for j in range(len(info["videoPaths"])):
            info["videoPaths"][j][1] = points
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
        self.displayFrameCorner()

    def fieldTextUpdater(self):
        """Updates field  goes from TL to TR to BR to BL"""
        info = openYaml()
        for i in range(len(info["videoPaths"])):
            if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                self.FieldTL.setPlaceholderText("Enter Cordinate in x y form")
                self.FieldTL.setText("")
                self.FieldTR.setPlaceholderText("Enter Cordinate in x y form")
                self.FieldTR.setText("")
                self.FieldBR.setPlaceholderText("Enter Cordinate in x y form")
                self.FieldBR.setText("")
                self.FieldBL.setPlaceholderText("Enter Cordinate in x y form")
                self.FieldBL.setText("")
                try:
                    self.FieldTL.setPlaceholderText(str(info["videoPaths"][i][1][0][0]) + " " + str(info["videoPaths"][i][1][0][1]))
                    self.FieldTR.setPlaceholderText(str(info["videoPaths"][i][1][1][0]) + " " + str(info["videoPaths"][i][1][1][1]))
                    self.FieldBR.setPlaceholderText(str(info["videoPaths"][i][1][2][0]) + " " + str(info["videoPaths"][i][1][2][1]))
                    self.FieldBL.setPlaceholderText(str(info["videoPaths"][i][1][3][0]) + " " + str(info["videoPaths"][i][1][3][1]))
                except:
                    pass

        

    def FieldPointRegistrationTL(self):
        """Saves the top left position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        # print(sender.text() + ' was pressed')
        cord = sender.text()
        cord = cord.split(" ")
        # print(cord[0].isnumeric())
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    if len(info["videoPaths"][i][1]) >= 4:
                        info["videoPaths"][i][1][0] = cord
                    elif len(info["videoPaths"][i][1]) == 0:
                        info["videoPaths"][i][1] =  [cord]
                    elif len(info["videoPaths"][i][1]) < 4:
                        info["videoPaths"][i][1].insert(0,cord)
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
        self.displayFrameCorner()

    def FieldPointRegistrationTR(self):
        """Saves the top Right position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        # print(sender.text() + ' was pressed')
        cord = sender.text()
        cord = cord.split(" ")
        # print(cord[0].isnumeric())
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    if len(info["videoPaths"][i][1]) >= 4:
                        info["videoPaths"][i][1][1] = cord
                    elif len(info["videoPaths"][i][1]) == 0:
                        info["videoPaths"][i][1] =  [cord]
                    elif len(info["videoPaths"][i][1]) == 1:
                        info["videoPaths"][i][1].append(cord)
                    elif len(info["videoPaths"][i][1]) < 4:
                        info["videoPaths"][i][1].insert(1,cord)
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
        self.displayFrameCorner()
    
    def FieldPointRegistrationBR(self):
        """Saves the Bottom Right position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        # print(sender.text() + ' was pressed')
        cord = sender.text()
        cord = cord.split(" ")
        # print(cord[0].isnumeric())
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    if len(info["videoPaths"][i][1]) >= 4:
                        info["videoPaths"][i][1][2] = cord
                    elif len(info["videoPaths"][i][1]) == 0:
                        info["videoPaths"][i][1] =  [cord]
                    elif len(info["videoPaths"][i][1]) <= 2:
                        info["videoPaths"][i][1].append(cord)
                    elif len(info["videoPaths"][i][1]) < 4:
                        info["videoPaths"][i][1].insert(2,cord)
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
        self.displayFrameCorner()

    def FieldPointRegistrationBL(self):
        """Saves the Bottom left position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        # print(sender.text() + ' was pressed')
        cord = sender.text()
        cord = cord.split(" ")
        # print(cord[0].isnumeric())
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                    if len(info["videoPaths"][i][1]) >= 4:
                        info["videoPaths"][i][1][3] = cord
                    elif len(info["videoPaths"][i][1]) == 0:
                        info["videoPaths"][i][1] =  [cord]
                    elif len(info["videoPaths"][i][1]) <= 3:
                        info["videoPaths"][i][1].append(cord)
                    elif len(info["videoPaths"][i][1]) < 4:
                        info["videoPaths"][i][1].insert(3,cord)
        with open('config.yaml', 'w') as file:
            yaml.dump(info,file,default_flow_style=False) 
        self.displayFrameCorner()
        
    def toRegisterCorners(self):
        """Will continue from the Choose points tab and register corners button to register corners tab and remove everything"""
        try:
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabRegisterCorners, "Register Corners")

    def DoneRegisterCornersToBack(self):
        """Brings back all tabs and gets rid of register corners tab"""
        try:
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        self.startTab.setCurrentIndex(1)
    
    def toNext(self):
        """Will continue from the create or load project button and will update tabs to move to the rest"""
        sender = self.sender()
        pathExist = True
        info = openYaml()
        if not os.path.exists(info["Path"]):
            pathExist = False
            self.createhelplabel.setText("You need")
        nameExist = True
        if len(str(info["Name"])) == 0 and sender.text() == "Create Project":
            nameExist = False
        
        if nameExist and pathExist:
            try:
                self.startTab.removeTab(0)
                self.startTab.removeTab(0)
            except:
                pass
            self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
            self.startTab.addTab(self.tabPointSelection, "Choose Points")
            self.startTab.addTab(self.tabScoring, "Scoring")
            self.startTab.addTab(self.tabValidation, "Validation")
            # self.startTab.addTab(self.tabProcess, "Junk?")

        elif (not nameExist) and (not pathExist):
            self.createhelplabel.setText("You need to enter a project name and path")
        elif not nameExist:
            self.createhelplabel.setText("You need to enter a project name")
        elif not pathExist and sender.text() == "Create Project":
            self.createhelplabel.setText("You need to enter a project path")
        else:
            self.loadhelplabel.setText("You need to enter a project path")


    def show_popup(self):
        """pop up dont think is nessary"""
        msg = QMessageBox()
        msg.setWindowTitle("Warning")
        msg.setText("Previously saved project may be deleted\nWould you like to proceed?")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Yes|QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        
        msg.setDetailedText("may overide yaml file if stored in same location")

        msg.buttonClicked.connect(self.popup_button)
        return msg

    def popup_button(self, i):
        """to connect to the pop up but doesnt seem to work not really important """
        print(i.text())
        # not yet connected to actual yer or no

    def displayFrame(self):
        """Displays 1st frame of the video"""
        info = openYaml(False)
        
        if self.ComboVidMenu.count != 0 and os.path.exists(info["folderPath"]):

            # print(self.ComboVidMenu.currentText())
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(str(PROJECT_DIR / self.ComboVidMenu.currentText()))
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            ret, frame = cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
            image = image.scaled(300, 300, Qt.KeepAspectRatio)
            pixmap = QPixmap(image)
            
            # pixmap = QPixmap(cap)
            self.labelImageOri.setPixmap(pixmap)
            self.labelImageOri.setScaledContents(True)
            # plt.imshow(frame)
            # self.labelImageOri.setText("Original Image Place Holder")

           
        else:
            self.labelImageOri.setText("Original Image Place Holder")
        self.displayAltFrame()

          


    def displayAltFrame(self):
        """Displays 1st frame of the altered video"""
        # print("happened")
        info = openYaml(False)
        for i in range(len(info["videoPaths"])):
            if info["videoPaths"][i][0] == self.ComboVidMenu.currentText():
                index = i
                # print(index)
        if self.ComboVidMenu.count != 0 and os.path.exists(info["folderPath"]) and len(info["videoPaths"][index][1]) == 4:

            # print(self.ComboVidMenu.currentText())
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(str(PROJECT_DIR / self.ComboVidMenu.currentText()))
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            ret, frame = cap.read()
            registration_points = np.array(
                info["videoPaths"][index][1]
            ).astype(np.float32)

            x = registration_points[:,0]
            y = registration_points[:,1]
            w, h = 500, 500 # in mm
            schema = np.array([
                [0, 0],
                [w, 0],
                [w, h],
                [0, h]
            ]).astype(np.float32)
            homogeneous_transform = cv2.getPerspectiveTransform(registration_points, schema)
            frame = cv2.warpPerspective(frame, homogeneous_transform, (w, h))
            
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
            image = image.scaled(300, 300, Qt.KeepAspectRatio)
            pixmap = QPixmap(image)
            
            # pixmap = QPixmap(cap)
            self.labelImageAlt.setPixmap(pixmap)
            self.labelImageAlt.setScaledContents(True)
            # plt.imshow(frame)
            # self.labelImageOri.setText("Original Image Place Holder")

        else:
            print("else")
            self.labelImageAlt.setText("Altered Image Place Holder")


    def displayVideo(self):
        """Plays video? not yet"""
        info = openYaml(False)
        
        if self.ComboVidValidationMenu.count != 0 and os.path.exists(info["folderPath"]):

            # print(self.ComboVidValidationMenu.currentText())
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(str(PROJECT_DIR / self.ComboVidValidationMenu.currentText()))
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            ret, frame = cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
            image = image.scaled(300, 300, Qt.KeepAspectRatio)
            pixmap = QPixmap(image)
            
            # pixmap = QPixmap(cap)
            self.labelVideoValidation.setPixmap(pixmap)
            self.labelVideoValidation.setMinimumSize(300,300)
            self.labelVideoValidation.setMaximumSize(600,600)
            self.labelVideoValidation.setScaledContents(True)
            # plt.imshow(frame)
            # self.labelImageOri.setText("Original Image Place Holder")

           
        else:
            self.labelVideoValidation.setText("Original Image Place Holder")

    def displayFrameCorner(self):
        """Displays 1st frame of the video"""
        info = openYaml(False)
        
        if self.ComboVidMenuCorner.count != 0 and os.path.exists(info["folderPath"]):

            # print(self.ComboVidMenu.currentText())
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(str(PROJECT_DIR / self.ComboVidMenuCorner.currentText()))
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            



            ret, frame = cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape

            
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)

            imwidth = image.width()
            imheight = image.height()
            self.labelImgBL.setText("0,"+ str(imheight))
            self.labelImgBR.setText(str(imwidth) +","+ str(imheight))
            self.labelImgTL.setText("0,0")
            self.labelImgTR.setText(str(imwidth) + ",0")
          
            pixmap = QPixmap(image)
            # Sets points
            for i in range(len(info["videoPaths"])):
                if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText() and len(info["videoPaths"][i][1]) != 0:
                    index = i
                    for j in range(len(info["videoPaths"][i][1])):
                        painter = QtGui.QPainter(pixmap)
                        pen = QPen(Qt.red)
                        pen.setWidth(10)
                        
                        painter.setPen(pen) 
                        
                        painter.drawPoint(int(info["videoPaths"][i][1][j][0]), int(info["videoPaths"][i][1][j][1]),)
                        # painter.drawLine(10, 10, 300, 200)
                        painter.end()
                        # print(j)
            

            
            # pixmap = QPixmap(cap)
            self.labelImageOriCorner.setPixmap(pixmap)
            self.labelImageOriCorner.setMinimumSize(300,300)
            self.labelImageOriCorner.setMaximumSize(600,600)
            self.labelImageOriCorner.setScaledContents(True)
            # print(info["videoPaths"])

            # plt.imshow(frame)
            # self.labelImageOri.setText("Original Image Place Holder")
            if "index" not in locals():
                for i in range(len(info["videoPaths"])):
                    if info["videoPaths"][i][0] == self.ComboVidMenuCorner.currentText():
                        index = i
           
            # Displays altered image
            if len(info["videoPaths"][index][1]) == 4:
             
                registration_points = np.array(
                info["videoPaths"][index][1]
                ).astype(np.float32)

                x = registration_points[:,0]
                y = registration_points[:,1]
                w, h = 500, 500 # in mm
                schema = np.array([
                    [0, 0],
                    [w, 0],
                    [w, h],
                    [0, h]
                ]).astype(np.float32)
                homogeneous_transform = cv2.getPerspectiveTransform(registration_points, schema)
            
                frame = cv2.warpPerspective(frame, homogeneous_transform, (w, h))
                
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = frame.shape
                bytes_per_line = ch * w
                altimage = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
                altimage = altimage.scaled(300, 300, Qt.KeepAspectRatio)
                altpixmap = QPixmap(altimage)
     
                # pixmap = QPixmap(cap)
                
                self.labelImageAltCorner.setPixmap(altpixmap)
                self.labelImageAltCorner.setMinimumSize(300,300)
                self.labelImageAltCorner.setMaximumSize(600,600)
                self.labelImageAltCorner.setScaledContents(True)
            else:
           
                self.labelImageAltCorner.setText("Altered Image Place Holder\nWill be visble when 4 points are selected")

            # Updates the text fields
            self.fieldTextUpdater()

           
        else:
            self.labelImageOriCorner.setText("Original Image Place Holder")
            self.labelImgBL.setText("")
            self.labelImgBR.setText("")
            self.labelImgTL.setText("")
            self.labelImgTR.setText("")



        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
