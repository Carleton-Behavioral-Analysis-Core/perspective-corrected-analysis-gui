import sys
import os
import cv2
import time
import yaml
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
import pyqtgraph as pg
from pyqtgraph import ViewBox
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QSlider
from functools import partial

# from PyQt5.QtWidgets import QApplication, QTableView
# from PyQt5.QtCore import QAbstractTableModel, Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMessageBox

from PIL import Image
from PIL import ImageDraw


class NoAliasDumper(yaml.SafeDumper):
    """Prevents yaml from using id to save space (would potentially mess up certain functions)"""
    def ignore_aliases(self, data):
        return True


def openYaml(rewrite=True):
    """Opens yaml file if file is messed with resets it to generic if not returns yaml info"""
    try:
        # if True:
        with open("config.yaml", "r") as file:
            info = yaml.safe_load(file)
            # print("past safe load")
            if len(info) != 14:
                x = 1 / 0
    except:
        # if False:
        if rewrite:
            print("rewrite info")

            info = {
                "folderPath": "",
                "DLCfolderPath": "",
                "videoPaths": [],
                "DLCvideoPaths": [],
                "zones": {"center": []},
                "BoxHeight": "",
                "BoxWidth": "",
                "Name": "",
                "Path": "",
                "numFeatures": "2",
                "data": {" Videos": [], "Feature 1": [], "Feature 2": []},
                "uncertainty": 0.6,
                "groups": [],
                "threshold": 20
            }
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
    return info


def openHelperYaml(rewrite=True):
    """Opens yaml file if file is messed with resets it to generic if not returns yaml (acts like a support file)"""
    rewrite = False
    try:
        with open("helper.yaml", "r") as file:
            helper = yaml.safe_load(file)
            if len(helper) != 4:
                x = 1 / 0
    except:
        print("rewrite helper")
        if rewrite:
            
            helper = {
                "ValidationVideoSettings": {
                    "PlayBackSpeed": 1,
                    "Frame": 0,
                    "FPS": 30,
                    "TotalFrames": 1,
                },
                "PartsOfInterest": [],
                "points": [],
                "Zones":{}
            }
            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
    return helper


def transform_dataframe_to_perspective(df, T):
    """Transform the coordinate dataframes to be in the box's frame of reference"""
    df = df.copy().dropna()
    idx = pd.IndexSlice
    x = df.loc[:, idx[:, :, "x"]]
    y = df.loc[:, idx[:, :, "y"]]
    x = x.stack(dropna=False).stack(dropna=False)
    y = y.stack(dropna=False).stack(dropna=False)

    tx, ty, v = T @ np.c_[x, y, np.ones_like(x)].T
    tx = tx / v
    ty = ty / v

    tx = pd.DataFrame(tx, index=x.index, columns=x.columns).unstack().unstack()
    ty = pd.DataFrame(ty, index=y.index, columns=y.columns).unstack().unstack()

    # Update multi index columns to match
    df.loc[:, pd.IndexSlice[:, :, "x"]] = tx
    df.loc[:, pd.IndexSlice[:, :, "y"]] = ty
    return df


class pandasModel(QAbstractTableModel):
    """Allows a visual display of a dictonary to be seen"""

    # https://learndataanalysis.org/display-pandas-dataframe-with-pyqt5-qtableview-widget/ Creatng data frame table
    def __init__(self, data):
        QAbstractTableModel.__init__(self)
        self._data = data

    def rowCount(self, parent=None):
        return self._data.shape[0]

    def columnCount(self, parnet=None):
        return self._data.shape[1]

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
        return None

    def headerData(self, col, orientation, role):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self._data.columns[col]
        return None


def SetForAllVideos_popup():
    """Shows a warning for setting the points for all the videos and makes sure choice is confirmed"""
    msg = QtWidgets.QMessageBox()
    msg.setWindowTitle("Confirmation")
    msg.setText("Are you sure you want to set these points for all videos?")
    msg.setInformativeText(
        "If you proceed all other points will be erased and replaced with the currently choosen points"
    )
    msg.setIcon(QMessageBox.Warning)
    msg.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
    msg.setDefaultButton(QtWidgets.QMessageBox.No)

    x = msg.exec_()
    return x


def ClearConfig_popup():
    """SHows for clearing the config file (when creating new file)"""
    msg = QtWidgets.QMessageBox()
    msg.setWindowTitle("Confirmation")
    msg.setText("Proceeding with this action may erase saved data")
    msg.setInformativeText("If you proceed the previouslty saved data may be erased")
    msg.setIcon(QMessageBox.Warning)
    msg.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
    msg.setDefaultButton(QtWidgets.QMessageBox.No)

    x = msg.exec_()
    return x


def ValidationWarning_popup():
    """How to get videos to reset instructions"""
    msg = QtWidgets.QMessageBox()
    msg.setWindowTitle("Confirmation")
    msg.setText("When changing videos hit stop then play to reset video")
    msg.setIcon(QtWidgets.QMessageBox.warning)
    msg.exec_()


def ValidationSlider_popup():
    """How to get videos to reset instructions (not used)"""
    msg = QtWidgets.QMessageBox()
    msg.setWindowTitle("Confirmation")
    msg.setText(
        "To change slider for other videos changing video in dropdown,\nthen hit stop, then play and then move slider"
    )
    msg.setIcon(QtWidgets.QMessageBox.warning)
    msg.setStandardButtons(QtWidgets.QMessageBox.Okay)
    msg.setDefaultButton(QtWidgets.QMessageBox.Okay)
    msg.exec_()


# creates video thread
class ThreadOpenCV(QThread):
    """The thread for playing the video"""

    # https://stackoverflow.com/questions/67488022/how-do-i-run-a-video-in-a-pyqt-container
    changePixmap = pyqtSignal(QImage)

    def __init__(self, source):
        """Initializes"""
        super().__init__()
        info = openYaml()

        for i in range(len(info["videoPaths"])):
            if source == info["videoPaths"][i]["title"]:
                self.index = i
        PROJECT_DIR = Path(info["DLCfolderPath"])
        # cap = cv2.VideoCapture(str(PROJECT_DIR / info["videoPaths"][index]["DLC.mp4"]))
        self.source = str(PROJECT_DIR / info["videoPaths"][self.index]["DLC.mp4"])
        self.running = True
        self.count = 0

    def run(self):
        """Plays the video"""
        info = openYaml()
        helper = openHelperYaml()
        cap = cv2.VideoCapture(self.source)
        fps = float(cap.get(cv2.CAP_PROP_FPS))
        video_length = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

        self.running = True

        while self.running:
            # Sets the frame
            if helper["ValidationVideoSettings"]["Frame"] <= video_length:
                cap.set(
                    cv2.CAP_PROP_POS_FRAMES, helper["ValidationVideoSettings"]["Frame"]
                )
            else:
                cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

            ret, frame = cap.read()

            if ret:
                if len(info["videoPaths"][self.index]["points"]) == 4:
                    registration_points = np.array(
                        info["videoPaths"][self.index]["points"]
                    ).astype(np.float32)

                    if (
                        str(info["BoxWidth"]).isnumeric()
                        and str(info["BoxHeight"]).isnumeric()
                    ):
                        wid, hei = int(info["BoxWidth"]), int(
                            info["BoxHeight"]
                        )  # in mm
                    else:
                        wid, hei = 500, 500
                    schema = np.array([[0, 0], [wid, 0], [wid, hei], [0, hei]]).astype(
                        np.float32
                    )

                    homogeneous_transform = cv2.getPerspectiveTransform(
                        registration_points, schema
                    )

                    frame = cv2.warpPerspective(
                        frame, homogeneous_transform, (wid, hei)
                    )

                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                h, w, ch = frame.shape
                bytes_per_line = ch * w  # PEP8: `lower_case_names` for variables

                image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)

                # Trying to draw shape
                for key in info["zones"]:
                    if len(info["zones"][key]) == 4:
                        painter = QPainter(image)
                        pixmap = QPixmap(image)
                        painter.drawPixmap(image.height(), image.width(), pixmap)
                        brush = QBrush(QColor(0, 0, 150, 127))

                        points = QPolygon(
                            [
                                QPoint(info["zones"][key][0][0], info["zones"][key][0][1]),
                                QPoint(info["zones"][key][1][0], info["zones"][key][1][1]),
                                QPoint(info["zones"][key][2][0], info["zones"][key][2][1]),
                                QPoint(info["zones"][key][3][0], info["zones"][key][3][1]),
                            ]
                        )

                        painter.setBrush(brush)
                        painter.drawPolygon(points)
                        del painter
                        del brush
                    else:
                        pass

                image = image.scaled(640, 480, Qt.KeepAspectRatio)
                x = (1 / fps) / (helper["ValidationVideoSettings"]["PlayBackSpeed"])
                if 0.02 < x:
                    time.sleep(x - 0.02)
                helper["ValidationVideoSettings"]["FPS"] = fps
                helper["ValidationVideoSettings"]["Frame"] = (
                    helper["ValidationVideoSettings"]["Frame"] + 1
                )
                helper["ValidationVideoSettings"]["TotalFrames"] = video_length

                with open("helper.yaml", "w") as file:
                    yaml.dump(
                        helper, file, default_flow_style=False, Dumper=NoAliasDumper
                    )

                self.changePixmap.emit(image)
        try:
            # Should I be deleting the helper info after every open?
            del helper
            del info
        except:
            pass
        cap.release()
        # print('stop')

    def stop(self):
        """sets self.running to false which stops video"""
        self.running = False


# Creating the main window
class App(QMainWindow):
    """THe main window"""

    def __init__(self):
        super().__init__()
        self.title = "Andre, Argel & Aidan's amazingly awesome array alignment"
        self.left = 0
        self.top = 0
        self.width = 500
        self.height = 400
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        self.tab_widget = MyTabWidget(self)
        self.setCentralWidget(self.tab_widget)

        self.show()


# Creating tab widgets
class MyTabWidget(QWidget):
    """The tab that is set on the main window"""

    def __init__(self, parent):
        super(QWidget, self).__init__(parent)
        self.layout = QVBoxLayout(self)

        self.startTab = QTabWidget()
        self.startTab.resize(300, 200)

        # Initialize tab screen
        self.tabCreateOrLoad = QWidget()
        self.tabCreate = QWidget()
        self.tabLoad = QWidget()
        self.tabFolderDisplay = QWidget()
        self.tabPointSelection = QWidget()
        self.tabScoring = QWidget()
        self.tabValidation = QWidget()
        self.tabRegisterCorners = QWidget()
        self.tabCreateSchema = QWidget()
        self.tabGroup = QWidget()
        self.tabZone = QWidget()

        # Dont think I need most of these
        self.path = ""
        self.title = ""
        self.cornerImageDim = []
        self.zoneImageDim = []
        self.vidPlayingVal = ""
        self.videoTrackerIndex = 0
        info = openYaml()
        helper = openHelperYaml()

        # Add tabs (only start with this one)
        self.startTab.addTab(self.tabCreateOrLoad, "Load/Create")

        # Styles
        self.startTab.setStyleSheet(
            """
                        QTabBar::tab {
                            background-color: silver;
                            color: black;
                            }
                        QTabBar::tab:selected { 
                            background-color: white;
                            color: black; 
                            }
                            """
        )

        # load or create tab
        self.tabCreateOrLoad.layout = QHBoxLayout()

        self.btnCreateProj = QPushButton("Create Project")
        self.btnCreateProj.clicked.connect(self.Create_DLC_Project)

        self.btnCreateProj.setStyleSheet(
            "QPushButton {background-color: lime; color: black;}"
        )

        self.btnOpenProj = QPushButton("Load Project")
        self.btnOpenProj.clicked.connect(self.Open_DLC_Project)
        self.btnOpenProj.setStyleSheet(
            "QPushButton {background-color: lime; color: black;}"
        )

        self.tabCreateOrLoad.layout.addWidget(self.btnCreateProj)
        self.tabCreateOrLoad.layout.addWidget(self.btnOpenProj)

        self.tabCreateOrLoad.setLayout(self.tabCreateOrLoad.layout)

        # Create tab
        self.tabCreate.layout = QGridLayout()

        self.labelName = QLabel("Project Name:")

        self.projNameField = QLineEdit()
        self.projNameField.setPlaceholderText("Enter the Project Name")
        self.projNameField.returnPressed.connect(self.StoreProjName)

        self.labelProjPath = QLabel("Project Path:")

        self.projLocField = QLineEdit()
        self.projLocField.setPlaceholderText("Enter the project path")
        self.projLocField.returnPressed.connect(self.StoreProjLocation)

        self.btnProjPath = QPushButton("Project Path")
        self.btnProjPath.clicked.connect(self.PathSearch)

        self.btnCreate = QPushButton("Create Project")
        self.btnCreate.clicked.connect(self.toNext)

        self.createhelplabel = QLabel("")

        self.tabCreate.layout.addWidget(self.labelName, 0, 0, 1, 1)
        self.tabCreate.layout.addWidget(self.projNameField, 0, 1, 1, 3)
        self.tabCreate.layout.addWidget(self.labelProjPath, 1, 0, 1, 1)
        self.tabCreate.layout.addWidget(self.projLocField, 1, 1, 1, 2)
        self.tabCreate.layout.addWidget(self.btnProjPath, 1, 3, 1, 1)
        self.tabCreate.layout.addWidget(self.btnCreate, 2, 0, 1, 4)
        self.tabCreate.layout.addWidget(self.createhelplabel, 3, 0, 1, 4)

        self.tabCreate.setLayout(self.tabCreate.layout)

        # Load tab
        self.tabLoad.layout = QGridLayout()

        self.labelProjPathv2 = QLabel("Project Path:")

        self.projLocFieldv2 = QLineEdit()
        self.projLocFieldv2.setPlaceholderText("Enter the project path")
        self.projLocFieldv2.returnPressed.connect(self.StoreProjLocationv2)

        self.btnProjPathv2 = QPushButton("Project Path")
        self.btnProjPathv2.clicked.connect(self.PathSearch)

        self.btnLoad = QPushButton("Load Project")
        self.btnLoad.clicked.connect(self.toNext)

        self.loadhelplabel = QLabel("")

        self.tabLoad.layout.addWidget(self.labelProjPathv2, 0, 0, 1, 1)
        self.tabLoad.layout.addWidget(self.projLocFieldv2, 0, 1, 1, 2)
        self.tabLoad.layout.addWidget(self.btnProjPathv2, 0, 3, 1, 1)
        self.tabLoad.layout.addWidget(self.btnLoad, 1, 0, 1, 4)
        self.tabLoad.layout.addWidget(self.loadhelplabel, 2, 0, 1, 4)

        self.tabLoad.setLayout(self.tabLoad.layout)

        # Folder Display tab
        self.tabFolderDisplay.layout = QGridLayout()

        self.labelVideoFolder = QLabel("Video Folder")

        self.searchField = QLineEdit()
        if len(info["folderPath"]) != 0 and os.path.exists(str(info["folderPath"])):
            self.searchField.setPlaceholderText(str(info["folderPath"]))
        else:
            self.searchField.setPlaceholderText("Enter Folder Path")
        self.searchField.returnPressed.connect(self.FolderSearchField)
        # Folder search function may have to be changed maybe to something involving yaml for opening folder (not new)

        self.btnSearchVideoFolder = QPushButton("OPEN")
        self.btnSearchVideoFolder.clicked.connect(self.FolderSearch)

        self.labelDLCVideoFolder = QLabel("DeepLabCut Analysis Folder")

        self.searchFieldDLC = QLineEdit()
        if len(info["DLCfolderPath"]) != 0 and os.path.exists(
            str(info["DLCfolderPath"])
        ):
            self.searchFieldDLC.setPlaceholderText(str(info["DLCfolderPath"]))
        else:
            self.searchFieldDLC.setPlaceholderText("Enter Folder Path")
        self.searchFieldDLC.returnPressed.connect(self.DLCFolderSearchField)

        self.btnSearchVideoDLCFolder = QPushButton("OPEN")
        self.btnSearchVideoDLCFolder.clicked.connect(self.DLCFolderSearch)

        self.labelVidToDLC = QLabel("Video to DLC Label Matching")

        self.listVideoFolders = QListWidget()

        self.labelListVideoTitle = QLabel("Videos")

        self.labelListDLCTitle = QLabel("DeepLabCut Files")
        # print((info["data"][" Videos"]))
        if len(info["data"][" Videos"]) != 0:
            self.listVideoFolders.addItems(info["data"][" Videos"])

        self.listDLCVideoFolders = QListWidget()
        if len(info["DLCvideoPaths"]) != 0:
            for i in range(len(info["DLCvideoPaths"])):
                self.listDLCVideoFolders.addItem(info["DLCvideoPaths"][i]["h5"])

        self.labelSpacer1 = QLabel("")
        self.labelSpacer2 = QLabel("")

        self.tabFolderDisplay.layout.addWidget(
            self.labelVideoFolder, 0, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(self.searchField, 1, 0, 1, 3)
        self.tabFolderDisplay.layout.addWidget(self.btnSearchVideoFolder, 1, 3, 1, 1)
        self.tabFolderDisplay.layout.addWidget(
            self.labelSpacer1, 2, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(
            self.labelDLCVideoFolder, 3, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(self.searchFieldDLC, 4, 0, 1, 3)
        self.tabFolderDisplay.layout.addWidget(self.btnSearchVideoDLCFolder, 4, 3, 1, 1)
        self.tabFolderDisplay.layout.addWidget(
            self.labelSpacer2, 5, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(
            self.labelVidToDLC, 6, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(
            self.labelListVideoTitle, 7, 0, 1, 2, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(
            self.labelListDLCTitle, 7, 2, 1, 2, alignment=QtCore.Qt.AlignCenter
        )
        self.tabFolderDisplay.layout.addWidget(self.listVideoFolders, 8, 0, 1, 2)
        self.tabFolderDisplay.layout.addWidget(self.listDLCVideoFolders, 8, 2, 1, 2)

        self.tabFolderDisplay.setLayout(self.tabFolderDisplay.layout)

        # Point selection tab
        self.tabPointSelection.layout = QGridLayout()

        self.labelBoxWidth = QLabel("Box Width [mm]:")
        self.labelBoxWidth.setSizePolicy(30, 10)
        self.labelBoxWidth.setFixedHeight(10)

        self.FieldBoxWidth = QLineEdit()
        if len(str(info["BoxWidth"])) != 0 and (str(info["BoxWidth"])).isnumeric():
            self.FieldBoxWidth.setPlaceholderText(str(info["BoxWidth"]))
        else:
            self.FieldBoxWidth.setPlaceholderText("Box Width in mm")
        self.FieldBoxWidth.returnPressed.connect(self.boxWidthSave)

        self.labelBoxHeight = QLabel("Box Height [mm]:")
        self.labelBoxHeight.setSizePolicy(30, 10)
        self.labelBoxHeight.setFixedHeight(10)

        self.FieldBoxHeight = QLineEdit()
        if len(str(info["BoxHeight"])) != 0 and (str(info["BoxHeight"])).isnumeric():
            self.FieldBoxHeight.setPlaceholderText(str(info["BoxHeight"]))
        else:
            self.FieldBoxHeight.setPlaceholderText("Box Height in mm")
        self.FieldBoxHeight.returnPressed.connect(self.boxHeightSave)

        self.btnCreateSchema = QPushButton("2. REGISTER ZONES")
        self.btnCreateSchema.clicked.connect(self.toZones)

        self.btnRegisterCorners = QPushButton("1. REGISTER CORNERS")
        self.btnRegisterCorners.clicked.connect(self.toRegisterCorners)

        self.btnVisualizeRegistrations = QPushButton("3. Visualize REGISTRATIONS")
        self.btnVisualizeRegistrations.clicked.connect(self.displayFrame)

        self.ComboVidMenu = QComboBox()
        self.ComboVidMenu.addItems(info["data"][" Videos"])
        self.ComboVidMenu.currentTextChanged.connect(self.displayFrame)
        
        # self.ComboVidMenu.clicked.connect

        self.labelImageOri = QLabel("Original Image Place Holder")

        self.labelImageAlt = QLabel("Altered Image Place Holder")

        self.tabPointSelection.layout.addWidget(
            self.labelBoxWidth, 0, 0, 1, 1, alignment=QtCore.Qt.AlignRight
        )
        self.tabPointSelection.layout.addWidget(
            self.labelBoxHeight, 0, 2, 1, 1, alignment=QtCore.Qt.AlignRight
        )
        self.tabPointSelection.layout.addWidget(self.FieldBoxWidth, 0, 1, 1, 1)
        self.tabPointSelection.layout.addWidget(self.FieldBoxHeight, 0, 3, 1, 1)
        self.tabPointSelection.layout.addWidget(self.btnCreateSchema, 2, 1, 1, 1)
        self.tabPointSelection.layout.addWidget(self.btnRegisterCorners, 2, 0, 1, 1)
        self.tabPointSelection.layout.addWidget(
            self.btnVisualizeRegistrations, 2, 2, 1, 1
        )
        self.tabPointSelection.layout.addWidget(self.ComboVidMenu, 2, 3, 1, 1)
        self.tabPointSelection.layout.addWidget(self.labelImageOri, 3, 0, 1, 2)
        self.tabPointSelection.layout.addWidget(self.labelImageAlt, 3, 2, 1, 2)

        self.tabPointSelection.setLayout(self.tabPointSelection.layout)

        # scoring tab start
        self.tabScoring.layout = QGridLayout()

        self.btnScoreVid = QPushButton("SCORE VIDEOS")
        self.btnScoreVid.clicked.connect(
            self.placeHodlerBtn
        )  

        self.btnCreateVis = QPushButton("CREATE VISUALS")
        self.btnCreateVis.clicked.connect(self.placeHodlerBtn)

        self.labeltitleVisualScoring = QLabel(
            "Visualizations of Scoring Parameters and Results"
        )

        self.labelImageAltScore = QLabel("Altered Image Place Holder")

        self.tabScoring.layout.addWidget(self.btnScoreVid, 0, 0, 1, 2)
        self.tabScoring.layout.addWidget(self.btnCreateVis, 0, 2, 1, 2)
        self.tabScoring.layout.addWidget(
            self.labeltitleVisualScoring, 1, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )
        self.tabScoring.layout.addWidget(self.labelImageAltScore, 2, 0, 1, 4)

        self.tabScoring.setLayout(self.tabScoring.layout)

        # Validation tab
        self.tabValidation.layout = QGridLayout()

        self.labelVideo = QLabel()

        self.labelValidationVideoHeading = QLabel("Video")

        self.labelValidationFeatureHeading = QLabel("cool")

        self.listVideoFoldersValidation = QListWidget()
        if len(info["data"][" Videos"]) != 0:
            self.listVideoFoldersValidation.addItems(info["data"][" Videos"])

        self.featuresDataDisplay = QTableView()
        if len(info["data"][" Videos"]) >= 3:
            self.featuresDataDisplay.setMinimumHeight(115)
        elif len(info["data"][" Videos"]) == 2:
            self.featuresDataDisplay.setMinimumHeight(85)
        elif len(info["data"][" Videos"]) == 1:
            self.featuresDataDisplay.setMinimumHeight(55)
        # self.featuresDataDisplay.setMaximumHeight(len(info["data"][" Videos"]) + 25)
        self.featuresDataDisplay.setModel(pandasModel(pd.DataFrame(info["data"])))
        self.featuresDataDisplay.resizeColumnsToContents()
        hheader = self.featuresDataDisplay.horizontalHeader()
        hheader.setSectionResizeMode(QHeaderView.Stretch)
        hheader.setStyleSheet("::section {background-color: grey; color: black;}")

        # self.labelValidationTimeHeading = QLabel("Time (s)") #for time
        self.labelValidationTimeHeading = QLabel("Frame #")

        self.FieldTimeValidation = QLineEdit()
        self.FieldTimeValidation.setPlaceholderText("Enter Frame")
        self.FieldTimeValidation.returnPressed.connect(self.FrameSet)

        self.ComboVidValidationMenu = QComboBox()
        self.ComboVidValidationMenu.addItems(info["data"][" Videos"])
        self.ComboVidValidationMenu.currentTextChanged.connect(self.ChangeVideo)

        self.PlayBackSpeedValidationMenu = QComboBox()
        self.PlayBackSpeedValidationMenu.addItems(["0.5", "1", "2", "5", "10", "30"])
        self.PlayBackSpeedValidationMenu.setCurrentIndex(1)
        self.PlayBackSpeedValidationMenu.currentTextChanged.connect(self.changePlayBackSpeed) 


        self.labelVideoValidation = QLabel("Place Holder for Video")
        self.labelVideoValidation.setScaledContents(True)  # allows video to chage size

        self.btnPlayVal = QPushButton("PLAY")
        self.btnPlayVal.clicked.connect(self.playVideo)

        self.btnStopVal = QPushButton("STOP")
        self.btnStopVal.clicked.connect(self.stopVideo)

        self.GraphValidation = pg.PlotWidget()

        self.sliderVal = QSlider(Qt.Orientation.Horizontal, self)
        self.sliderVal.sliderReleased.connect(self.changeFrameSlider)
        self.sliderVal.setRange(0, 10)
        self.sliderVal.setSliderPosition(0)

        self.GraphValidationMenu = QComboBox()
        self.GraphValidationMenu.addItems(["In zone", "Distance"])
        self.GraphValidationMenu.currentTextChanged.connect(self.inzone)

        self.GraphValidationLabelMenu = QLabel("Visualize metric")

        self.GraphTitleValidationLabel = QLabel("Graph")

        self.btnResetVal = QPushButton("Reset")
        self.btnResetVal.clicked.connect(self.ResetValidation)

        self.btnExportData = QPushButton("Export Data")
        self.btnExportData.clicked.connect(self.ExportData)

        self.btnToGroup = QPushButton("Group")
        self.btnToGroup.clicked.connect(self.ToGroup)

        # self.slider = QSlider(Qt.Horizontal)

        # # Connect the sliderMoved signal to the set_position function
        # self.slider.sliderMoved.connect(self.placeHodlerBtn)

        # self.tabValidation.layout.addWidget(self.labelValidationVideoHeading,0,0,1,2)
        # self.tabValidation.layout.addWidget(self.labelValidationFeatureHeading,0,2,1,2)
        # self.tabValidation.layout.addWidget(self.listVideoFoldersValidation,1,0,2,1)
        self.tabValidation.layout.addWidget(self.featuresDataDisplay, 0, 0, 3, 5)
        self.tabValidation.layout.addWidget(
            self.labelValidationTimeHeading, 5, 3, 1, 1, alignment=QtCore.Qt.AlignCenter
        )
        self.tabValidation.layout.addWidget(self.FieldTimeValidation, 6, 3, 1, 1)
        self.tabValidation.layout.addWidget(self.ComboVidValidationMenu, 5, 4, 1, 1)
        self.tabValidation.layout.addWidget(
            self.PlayBackSpeedValidationMenu, 6, 4, 1, 1
        )
        self.tabValidation.layout.addWidget(self.labelVideoValidation, 5, 0, 3, 3)
        self.tabValidation.layout.addWidget(self.btnPlayVal, 7, 3, 1, 1)
        self.tabValidation.layout.addWidget(self.btnStopVal, 7, 4, 1, 1)
        self.tabValidation.layout.addWidget(self.sliderVal, 12, 0, 3, 1)
        self.tabValidation.layout.addWidget(self.GraphValidation, 9, 0, 3, 3)
        self.tabValidation.layout.addWidget(self.GraphValidationMenu, 8, 4, 1, 1)
        self.tabValidation.layout.addWidget(self.GraphValidationLabelMenu, 8, 3, 1, 1)
        self.tabValidation.layout.addWidget(
            self.GraphTitleValidationLabel, 8, 0, 1, 3, alignment=QtCore.Qt.AlignCenter
        )
        self.tabValidation.layout.addWidget(self.btnResetVal, 9, 3, 1, 1)

        self.tabValidation.layout.addWidget(self.btnExportData, 9, 4, 1, 1)
        self.tabValidation.layout.addWidget(self.btnToGroup, 10, 3, 1, 2)
        self.tabValidation.setLayout(self.tabValidation.layout)

        # register corners tab
        self.tabRegisterCorners.layout = QGridLayout()

        self.ComboVidMenuCorner = QComboBox()
        self.ComboVidMenuCorner.addItems(info["data"][" Videos"])
        self.ComboVidMenuCorner.currentTextChanged.connect(self.displayFrameCorner)

        self.btnChangeFrame = QPushButton("Change Frame")
        self.btnChangeFrame.clicked.connect(self.displayFrameCorner)

        self.labelImageOriCorner = QLabel("Original Image Place Holder")
        self.labelImageOriCorner.mousePressEvent = lambda event: self.locationInImage(
            event
        )

        self.labelInstructions = QLabel(
            "Either enter x y coordinates seperated\nby single space or press on image"
        )

        self.labelTopLeft = QLabel("Top Left:")
        self.labelTopLeft.setStyleSheet("QLabel {color: red;}")
        self.labelTopLeft.setMinimumWidth(70)
        self.FieldTL = QLineEdit()
        self.FieldTL.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldTL.returnPressed.connect(self.FieldPointRegistrationTL)  # Prob save x

        self.labelTopRight = QLabel("Top Right:")
        self.labelTopRight.setStyleSheet("QLabel {color: magenta;}")
        self.labelTopRight.setMinimumWidth(70)
        self.FieldTR = QLineEdit()
        self.FieldTR.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldTR.returnPressed.connect(self.FieldPointRegistrationTR)

        self.labelBottomRight = QLabel("Bottom Right:")
        self.labelBottomRight.setStyleSheet("QLabel {color: cyan;}")
        self.labelBottomRight.setMinimumWidth(70)
        self.FieldBR = QLineEdit()
        self.FieldBR.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBR.returnPressed.connect(self.FieldPointRegistrationBR)

        self.labelBottomLeft = QLabel("Bottom Left:")
        self.labelBottomLeft.setStyleSheet("QLabel {color: lime;}")
        self.labelBottomLeft.setMinimumWidth(70)
        self.FieldBL = QLineEdit()
        self.FieldBL.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBL.returnPressed.connect(self.FieldPointRegistrationBL)

        self.btnSetForAll = QPushButton("Set For All")
        self.btnSetForAll.clicked.connect(self.saveToAllCorner)

        self.btnClearPoints = QPushButton("Clear Points")
        self.btnClearPoints.clicked.connect(self.clearPointsCorner)

        self.btnDoneCorner = QPushButton("Save Changes")
        self.btnDoneCorner.clicked.connect(lambda: self.DoneRegisterCornersToBack(True))

        self.btnNoSaveCorner = QPushButton("Don't Save changes")
        self.btnNoSaveCorner.clicked.connect(
            lambda: self.DoneRegisterCornersToBack(False)
        )

        self.labelImageAltCorner = QLabel(
            "Altered Image Place Holder\nWill be visble when 4 points are selected"
        )

        self.labelImgBL = QLabel("")
        self.labelImgBR = QLabel("")
        self.labelImgTL = QLabel("")
        self.labelImgTR = QLabel("")

        self.spacingLabel1 = QLabel("")
        self.spacingLabel2 = QLabel("")

        # trying to get layout to look decent (creating sub layouts think it could have been done much easier)
        self.conjoinedLayout1 = QGridLayout()
        self.conjoinedLayout1.addWidget(
            self.labelImgTL, 0, 0, 1, 1, alignment=QtCore.Qt.AlignLeft
        )
        self.conjoinedLayout1.addWidget(
            self.labelImgTR, 0, 1, 1, 1, alignment=QtCore.Qt.AlignRight
        )

        self.conjoinedLayout1Wid = QWidget()
        self.conjoinedLayout1Wid.setLayout(self.conjoinedLayout1)

        self.conjoinedLayout2 = QGridLayout()
        self.conjoinedLayout2.addWidget(
            self.labelImgBL, 0, 0, 1, 1, alignment=QtCore.Qt.AlignLeft
        )
        self.conjoinedLayout2.addWidget(
            self.labelImgBR, 0, 1, 1, 1, alignment=QtCore.Qt.AlignRight
        )

        self.conjoinedLayout2Wid = QWidget()
        self.conjoinedLayout2Wid.setLayout(self.conjoinedLayout2)

        self.imageVerticalLayout = QVBoxLayout()
        self.imageVerticalLayout.addWidget(self.conjoinedLayout1Wid)
        self.imageVerticalLayout.addWidget(self.labelImageOriCorner)
        self.imageVerticalLayout.addWidget(self.conjoinedLayout2Wid)
        self.imageVerticalLayout.addWidget(self.labelImageAltCorner)

        self.ImageandLabelWidgt = QWidget()
        self.ImageandLabelWidgt.setLayout(self.imageVerticalLayout)

        self.conjoinedLayout3 = QGridLayout()
        self.conjoinedLayout3.addWidget(self.ComboVidMenuCorner, 0, 0, 1, 2)
        self.conjoinedLayout3.addWidget(self.btnChangeFrame, 0, 2, 1, 1)
        self.conjoinedLayout3.addWidget(self.spacingLabel1, 1, 0, 1, 3)

        self.conjoinedLayout3Wid = QWidget()
        self.conjoinedLayout3Wid.setLayout(self.conjoinedLayout3)

        self.conjoinedLayoutTL = QGridLayout()
        self.conjoinedLayoutTL.addWidget(self.labelTopLeft, 0, 0, 1, 2)
        self.conjoinedLayoutTL.addWidget(self.FieldTL, 0, 2, 1, 1)

        self.conjoinedLayoutTLWid = QWidget()
        self.conjoinedLayoutTLWid.setLayout(self.conjoinedLayoutTL)

        self.conjoinedLayoutTR = QGridLayout()
        self.conjoinedLayoutTR.addWidget(self.labelTopRight, 0, 0, 1, 2)
        self.conjoinedLayoutTR.addWidget(self.FieldTR, 0, 2, 1, 1)

        self.conjoinedLayoutTRWid = QWidget()
        self.conjoinedLayoutTRWid.setLayout(self.conjoinedLayoutTR)

        self.conjoinedLayoutBR = QGridLayout()
        self.conjoinedLayoutBR.addWidget(self.labelBottomRight, 0, 0, 1, 2)
        self.conjoinedLayoutBR.addWidget(self.FieldBR, 0, 2, 1, 1)

        self.conjoinedLayoutBRWid = QWidget()
        self.conjoinedLayoutBRWid.setLayout(self.conjoinedLayoutBR)

        self.conjoinedLayoutBL = QGridLayout()
        self.conjoinedLayoutBL.addWidget(self.labelBottomLeft, 0, 0, 1, 2)
        self.conjoinedLayoutBL.addWidget(self.FieldBL, 0, 2, 1, 1)

        self.conjoinedLayoutBLWid = QWidget()
        self.conjoinedLayoutBLWid.setLayout(self.conjoinedLayoutBL)

        self.conjoinedLayoutBtn = QGridLayout()
        self.conjoinedLayoutBtn.addWidget(self.spacingLabel2, 0, 0, 1, 3)
        self.conjoinedLayoutBtn.addWidget(self.btnClearPoints, 1, 0, 1, 1)
        self.conjoinedLayoutBtn.addWidget(self.btnSetForAll, 1, 1, 1, 2)
        self.conjoinedLayoutBtn.addWidget(self.btnNoSaveCorner, 2, 0, 1, 1)
        self.conjoinedLayoutBtn.addWidget(self.btnDoneCorner, 2, 1, 1, 2)

        self.conjoinedLayoutBtnWid = QWidget()
        self.conjoinedLayoutBtnWid.setLayout(self.conjoinedLayoutBtn)

        self.labelsNBtnsVerticalLayout = QVBoxLayout()
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayout3Wid)
        self.labelsNBtnsVerticalLayout.addWidget(
            self.labelInstructions, alignment=QtCore.Qt.AlignCenter
        )
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutTLWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutTRWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutBRWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutBLWid)
        self.labelsNBtnsVerticalLayout.addWidget(self.conjoinedLayoutBtnWid)
        # self.labelsNBtnsVerticalLayout.addWidget(self.btnDoneCorner)

        self.LabelsandButtonsWidget = QWidget()
        self.LabelsandButtonsWidget.setLayout(self.labelsNBtnsVerticalLayout)

        self.wholeCornerLayout = QHBoxLayout()

        self.wholeCornerLayout.addWidget(self.ImageandLabelWidgt)
        self.wholeCornerLayout.addWidget(self.LabelsandButtonsWidget)

        self.tabRegisterCorners.setLayout(self.wholeCornerLayout)

        # Create schema tab (dont think this tab is need keep until confirm)
        self.tabCreateSchema.layout = QGridLayout()

        self.ComboVidMenuSchema = QComboBox()
        self.ComboVidMenuSchema.addItems(info["data"][" Videos"])

        self.btnChangeFrameSchema = QPushButton("Change Frame")
        self.btnChangeFrameSchema.clicked.connect(self.displayAltFrameSchema)

        self.labelInstructionsSchema = QLabel(
            "Enter in the measured length in mm for\neach of the sides of the box"
        )
        # self.labelInstructions.setAlignment(alignment=QtCore.Qt.AlignCenter)

        self.labelTopSchema = QLabel("Top width in mm:")
        self.labelTopSchema.setMinimumWidth(70)
        self.FieldTSchema = QLineEdit()
        self.FieldTSchema.setPlaceholderText("Enter width in mm")
        self.FieldTSchema.returnPressed.connect(self.FieldLengthRegistrationTop)

        self.labelRightSchema = QLabel("Right length in mm:")
        self.labelRightSchema.setMinimumWidth(70)
        self.FieldRSchema = QLineEdit()
        self.FieldRSchema.setPlaceholderText("Enter length in mm")
        self.FieldRSchema.returnPressed.connect(self.FieldLengthRegistrationRight)

        self.labelImageAltSchema = QLabel("Altered Image Place Holder")
        self.labelImageAltSchema.resizeEvent

        self.labelBottomSchema = QLabel("Bottom length in mm:")

        self.labelBottomSchema.setMinimumWidth(70)
        self.FieldBSchema = QLineEdit()
        self.FieldBSchema.setPlaceholderText("Enter enter width in mm")
        self.FieldBSchema.returnPressed.connect(self.FieldLengthRegistrationBottom)

        self.labelLeftSchema = QLabel("Left length in mm:")
        self.labelLeftSchema.setMinimumWidth(70)
        self.FieldLSchema = QLineEdit()
        self.FieldLSchema.setPlaceholderText("Enter length in mm")
        self.FieldLSchema.returnPressed.connect(self.FieldLengthRegistrationLeft)

        self.btnSetForAllSchema = QPushButton("Set For All")
        self.btnSetForAllSchema.clicked.connect(self.setForAllLengths)

        self.btnClearMeasurementsSchema = QPushButton("Clear measurements")
        self.btnClearMeasurementsSchema.clicked.connect(self.clearLengths)

        self.btnDoneCornerSchema = QPushButton("Done")
        self.btnDoneCornerSchema.clicked.connect(
            lambda: self.DoneRegisterCornersToBack(False)
        )

        self.spacingLabel1Schema = QLabel("")
        self.spacingLabel2Schema = QLabel("")
        self.spacingLabel3Schema = QLabel("")
        self.spacingLabel4Schema = QLabel("")
        self.spacingLabel5Schema = QLabel("")
        self.spacingLabel6Schema = QLabel("")

        self.tabCreateSchema.layout.addWidget(self.ComboVidMenuSchema, 0, 0, 1, 3)
        self.tabCreateSchema.layout.addWidget(self.btnChangeFrameSchema, 0, 3, 1, 1)
        self.tabCreateSchema.layout.addWidget(
            self.labelInstructionsSchema, 1, 0, 1, 4, alignment=QtCore.Qt.AlignCenter
        )

        self.tabCreateSchema.layout.addWidget(
            self.labelTopSchema, 2, 0, 1, 2, alignment=QtCore.Qt.AlignRight
        )
        self.tabCreateSchema.layout.addWidget(
            self.FieldTSchema, 2, 2, 1, 2, alignment=QtCore.Qt.AlignLeft
        )

        self.tabCreateSchema.layout.addWidget(self.labelLeftSchema, 3, 0, 1, 1)
        self.tabCreateSchema.layout.addWidget(self.labelImageAltSchema, 3, 1, 2, 2)
        self.tabCreateSchema.layout.addWidget(self.labelRightSchema, 3, 3, 1, 1)
        self.tabCreateSchema.layout.addWidget(self.FieldLSchema, 4, 0, 1, 1)
        self.tabCreateSchema.layout.addWidget(self.FieldRSchema, 4, 3, 1, 1)

        self.tabCreateSchema.layout.addWidget(
            self.labelBottomSchema, 5, 0, 1, 2, alignment=QtCore.Qt.AlignRight
        )
        self.tabCreateSchema.layout.addWidget(
            self.FieldBSchema, 5, 2, 1, 2, alignment=QtCore.Qt.AlignLeft
        )
        self.tabCreateSchema.layout.addWidget(self.btnSetForAllSchema, 6, 0, 1, 2)
        self.tabCreateSchema.layout.addWidget(
            self.btnClearMeasurementsSchema, 6, 2, 1, 2
        )
        self.tabCreateSchema.layout.addWidget(self.btnDoneCornerSchema, 7, 0, 1, 4)

        self.tabCreateSchema.setLayout(self.tabCreateSchema.layout)

        #  group tab
        self.tabGroup.layout = QGridLayout()

        self.labelSelectGroup = QLabel("Select")
        # self.labelSelectGroup.setFixedHeight(40)
        self.labelVideoGroup = QLabel("Videos")
        # self.labelVideoGroup.setFixedHeight(40)
        self.labelGroupsGroup = QLabel("Groups")
        # self.labelGroupsGroup.setFixedHeight(40)

        self.scroll_area = QtWidgets.QScrollArea()

        self.scroll_area.setWidgetResizable(True)

        self.listVideoGroupLayout = QGridLayout()

        self.listVideoGroupLayout.addWidget(self.labelSelectGroup, 0, 0, 1, 1)
        self.listVideoGroupLayout.addWidget(self.labelVideoGroup, 0, 1, 1, 1)
        self.listVideoGroupLayout.addWidget(self.labelGroupsGroup, 0, 2, 1, 1)
        # self.listVideoGroupLayout.setHorizontalSpacing(10)
        # self.listVideoGroupLayout.setVerticalSpacing(5)
        # groups = set()
        for i in range(len((info["data"][" Videos"]))+1):
            localGroup = "N/A"
            
            exec("self.checkBoxGroup" + str(i) + " = QCheckBox()")
            exec(
                "self.listVideoGroupLayout.addWidget(self.checkBoxGroup"
                + str(i)
                + ", "
                + str(i + 1)
                + ", 0, 1, 1)"
            )
            exec("self.VidTitleGroupLabel" + str(i) + ' = QLabel("THis is first")')
            exec(
                "self.listVideoGroupLayout.addWidget(self.VidTitleGroupLabel"
                + str(i)
                + ", "
                + str(i + 1)
                + ", 1, 1, 1)"
            )
            exec("self.GroupGroupLabel" + str(i) + " = QLabel(localGroup)")
            exec(
                "self.listVideoGroupLayout.addWidget(self.GroupGroupLabel"
                + str(i)
                + ", "
                + str(i + 1)
                + ", 2, 1, 1)"
            )
        #     # print("tot " , i)
        self.listVideoGroupLayout.setHorizontalSpacing(10)
        self.listVideoGroupLayout.setVerticalSpacing(5)
      
        self.listVideoGroup = QWidget()
        self.listVideoGroup.setLayout(self.listVideoGroupLayout)
        self.scroll_area.setWidget(self.listVideoGroup)
    

        self.selectAllBtnGroup = QPushButton("Select All")
        self.selectAllBtnGroup.clicked.connect(self.selectAllGroupsBtnGroup)

        self.deselectAllBtnGroup = QPushButton("Deselect All")
        self.deselectAllBtnGroup.clicked.connect(self.deselectAllGroupsBtnGroup)

        self.addToNewGroupbtn = QPushButton("Add New Group")
        self.addToNewGroupbtn.clicked.connect(self.addGroupBtnGroup)

        self.FieldGroupTitle = QLineEdit()
        self.FieldGroupTitle.setPlaceholderText("Title")
        self.FieldGroupTitle.returnPressed.connect(self.newGroupNameHolder)

        self.addToExistingGroupbtn = QPushButton("Add to Existing Group")
        self.addToExistingGroupbtn.clicked.connect(self.addVideoToGroup)

        self.ComboVidExistingGroups = QComboBox()
        self.ComboVidExistingGroups.setMaxVisibleItems(4)
        # self.ComboVidExistingGroups.addItems(info["data"][" Videos"]) #Should be groups

        self.RemoveFromGroupBtn = QPushButton("Remove from group")
        self.RemoveFromGroupBtn.clicked.connect(self.removeVideoFromGroup)

        self.RemoveGroupBtn = QPushButton("Delete Group")
        self.RemoveGroupBtn.clicked.connect(self.removeGroup)

        self.placeholderbtn = QPushButton("Reset screen")
        self.placeholderbtn.clicked.connect(self.updateGroups)

        self.BackGroupBtn = QPushButton("Done Grouping")
        self.BackGroupBtn.clicked.connect(self.DoneGroupToBack)

        self.tabGroup.layout.addWidget(self.scroll_area, 0, 0, 4, 4)
        self.tabGroup.layout.addWidget(self.selectAllBtnGroup, 4, 0, 1, 2)
        self.tabGroup.layout.addWidget(self.deselectAllBtnGroup, 4, 2, 1, 2)
        self.tabGroup.layout.addWidget(self.FieldGroupTitle, 5, 0, 1, 2)
        self.tabGroup.layout.addWidget(self.addToNewGroupbtn, 5, 2, 1, 2)
        self.tabGroup.layout.addWidget(self.ComboVidExistingGroups, 6, 0, 1, 2)
        self.tabGroup.layout.addWidget(self.addToExistingGroupbtn, 6, 2, 1, 2)
        self.tabGroup.layout.addWidget(self.RemoveFromGroupBtn, 7, 0, 1, 2)
        self.tabGroup.layout.addWidget(self.RemoveGroupBtn, 7, 2, 1, 2)
        self.tabGroup.layout.addWidget(self.placeholderbtn, 8, 0, 1, 4)
        self.tabGroup.layout.addWidget(self.BackGroupBtn, 9, 0, 1, 4)

        self.tabGroup.setLayout(self.tabGroup.layout)

        try:
            int(helper["ValidationVideoSettings"]["Frame"])
            int(helper["ValidationVideoSettings"]["TotalFrames"])
        except:
            helper["ValidationVideoSettings"]["Frame"] = 0
            helper["ValidationVideoSettings"]["TotalFrames"] = 1

            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)

        # Zone tab 993275



        self.tabZone.layout = QGridLayout()

        self.ComboVidMenuZone = QComboBox()
        self.ComboVidMenuZone.addItems(info["data"][" Videos"])
        self.ComboVidMenuZone.currentTextChanged.connect(self.ZoneDisplay)

        self.ComboZoneMenuZone = QComboBox()
        zoneList = []
        for zone in info["zones"]:
            zoneList.append(zone)
        zoneList = sorted(
                zoneList,
                key=lambda a: sum(
                    ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
                ),
            )
        self.ComboZoneMenuZone.addItems(zoneList)
        self.ComboZoneMenuZone.currentTextChanged.connect(self.ZoneDisplay)


        self.labelImageOneZone = QLabel("One zone Image Place Holder")
        self.labelImageOneZone.mousePressEvent = lambda event: self.locationInImageZone(
            event
        )

        self.labelImageZone = QLabel("Multy Zone Image Place Holder")

        self.FieldNameZone = QLineEdit()
        self.FieldNameZone.setPlaceholderText("Name of Zone")
        self.FieldNameZone.returnPressed.connect(self.addZoneZone)

        self.btnDeleteZone = QPushButton("Delete Zone")
        self.btnDeleteZone.clicked.connect(self.removeZoneZone)

        self.labelInstructionsZone = QLabel(
            "Either enter x y coordinates seperated\nby single space or press on image"
        )
        self.labelTopLeftZone = QLabel("Top Left:")
        self.labelTopLeftZone.setStyleSheet("QLabel {color: red;}")
        self.labelTopLeftZone.setMinimumWidth(70)
        self.FieldTLZone = QLineEdit()
        self.FieldTLZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldTLZone.returnPressed.connect(self.FieldZoneRegistrationTL)  # Prob save x

        self.labelTopRightZone = QLabel("Top Right:")
        self.labelTopRightZone.setStyleSheet("QLabel {color: magenta;}")
        self.labelTopRightZone.setMinimumWidth(70)
        self.FieldTRZone = QLineEdit()
        self.FieldTRZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldTRZone.returnPressed.connect(self.FieldZoneRegistrationTR)

        self.labelBottomRightZone = QLabel("Bottom Right:")
        self.labelBottomRightZone.setStyleSheet("QLabel {color: cyan;}")
        self.labelBottomRightZone.setMinimumWidth(70)
        self.FieldBRZone = QLineEdit()
        self.FieldBRZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBRZone.returnPressed.connect(self.FieldZoneRegistrationBR)

        self.labelBottomLeftZone = QLabel("Bottom Left:")
        self.labelBottomLeftZone.setStyleSheet("QLabel {color: lime;}")
        self.labelBottomLeftZone.setMinimumWidth(70)
        self.FieldBLZone = QLineEdit()
        self.FieldBLZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBLZone.returnPressed.connect(self.FieldZoneRegistrationBL)

        

        self.btnClearPointsZone = QPushButton("Clear Points")
        self.btnClearPointsZone.clicked.connect(self.clearZone)

        self.btnDoneCornerZone = QPushButton("Save Changes")
        self.btnDoneCornerZone.clicked.connect(lambda: self.DoneRegisterZonesToBack(True))

        self.btnNoSaveCornerZone = QPushButton("Don't Save changes")
        self.btnNoSaveCornerZone.clicked.connect(
            lambda: self.DoneRegisterZonesToBack(False)
        )

        self.tabZone.layout.addWidget(self.labelImageOneZone, 0, 0, 4, 4)
        self.tabZone.layout.addWidget(self.labelImageZone, 4, 0, 4, 4)
        self.tabZone.layout.addWidget(self.ComboVidMenuZone, 0, 4, 1, 2)
        self.tabZone.layout.addWidget(self.ComboZoneMenuZone, 0, 6, 1, 2)
        self.tabZone.layout.addWidget(self.labelInstructionsZone, 2, 4, 1, 4)
       
        self.tabZone.layout.addWidget(self.btnDeleteZone, 1, 6, 1, 2)
        self.tabZone.layout.addWidget(self.FieldNameZone, 1, 4, 1, 2)

        self.tabZone.layout.addWidget(self.labelTopLeftZone, 3, 4, 1, 1)
        self.tabZone.layout.addWidget(self.FieldTLZone, 3, 5, 1, 3)
        self.tabZone.layout.addWidget(self.labelTopRightZone, 4, 4, 1, 1)
        self.tabZone.layout.addWidget(self.FieldTRZone, 4, 5, 1, 3)
        self.tabZone.layout.addWidget(self.labelBottomRightZone, 5, 4, 1, 1)
        self.tabZone.layout.addWidget(self.FieldBRZone, 5, 5, 1, 3)
        self.tabZone.layout.addWidget(self.labelBottomLeftZone, 6, 4, 1, 1)
        self.tabZone.layout.addWidget(self.FieldBLZone, 6, 5, 1, 3)
        self.tabZone.layout.addWidget(self.btnClearPointsZone, 7, 4, 1, 4)
        self.tabZone.layout.addWidget(self.btnDoneCornerZone, 8, 4, 1, 2)
        self.tabZone.layout.addWidget(self.btnNoSaveCornerZone, 8, 6, 1, 2)
        self.tabZone.setLayout(self.tabZone.layout)

       

        # Delete when real
        self.startTab.addTab(self.tabZone, "Zone")
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        # self.startTab.addTab(self.tabRegisterCorners, "Register Corners")
        # self.startTab.addTab(self.tabCreateSchema, "Schema")
        self.startTab.addTab(self.tabGroup, "Group")
        

        # # delete when real

        # Add tabs to widget
        self.layout.addWidget(self.startTab)
        self.setLayout(self.layout)

    def FolderSearch(self):
        """When button is clicked will allow user to search explorer for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(
            self, "Open the location of the recorded video files", r"" + str(self.cwd)
        )
        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) != 0:
                info = openYaml()
                info["folderPath"] = self.path
                info["videoPaths"] = []
                info["data"][" Videos"] = []

                fileList = os.listdir(self.path)
                x = len(fileList)
                for i in range(x):
                    if not fileList[x - (i + 1)].endswith(".mp4"):
                        fileList.pop(x - (i + 1))
                info["data"] = {" Videos": fileList.copy()}
                info["videoPaths"] = fileList.copy()

                # print(fileList)
                for i in range(len(fileList)):
                    info["videoPaths"][i] = {
                        "title": info["videoPaths"][i],
                        "points": [],
                        "lengths": {"Top": "", "Bottom": "", "Right": "", "Left": ""},
                        "DLC": "",
                        "DLC.mp4": "",
                        "group": []
                    }


                """If can connect to dataframe in dlc can use this code to display headings (not sure if tracking time in zone but could do by header is what I'm trying to say)
                PROJECT_DIR = Path("C:/Users/avpet/OneDrive/Documents/Python code/DSRI/2023-06-15_sample-data/dlc_files")
                df = pd.read_hdf(PROJECT_DIR / 'f1DLC_resnet50_agrpNov19shuffle1_400000.h5')
 
                listdf = list(df)
   
                features = []
                for i in range(len(listdf)):
                    if i == 0 or features[len(features)-1] != listdf[i][1]:
                        features.append(listdf[i][1])
                    else:
                        pass
                    
                    and list features would be a list of all the features"""

                with open("config.yaml", "w") as file:
                    yaml.dump(
                        info, file, default_flow_style=False, Dumper=NoAliasDumper
                    )

                self.yamlUpdateUI()

        except:
            print("error 4")

    def DLCFolderSearch(self):
        """When button is clicked will allow user to search explorer for folder that contains DLC h5 files and updates config file"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(
            self, "Open the location of the recorded video files", r"" + str(self.cwd)
        )
        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) != 0:
                info = openYaml()
                info["DLCfolderPath"] = self.path

                fileList = os.listdir(self.path)

                x = len(fileList)
                for i in range(x):
                    if not fileList[x - (i + 1)].endswith(".h5"):
                        fileList.pop(x - (i + 1))
                info["DLCvideoPaths"] = []
                for i in range(len(fileList)):
                    info["DLCvideoPaths"].append({"h5": fileList[i], "bodyparts": {}})
                    for j in range(len(info["videoPaths"])):
                        if fileList[i].startswith(
                            info["videoPaths"][j]["title"][
                                : len(info["videoPaths"][j]["title"]) - 4
                            ]
                        ):
                            info["videoPaths"][j]["DLC"] = fileList[i]

                # Assumes that all the h5 files collect the same features
                if len(fileList) > 0:
                    PROJECT_DIR = Path(self.path)
                    df = pd.read_hdf(PROJECT_DIR / fileList[0])
                    listdf = list(df)
                    # creates list of features
                    features = []
                    for i in range(len(listdf)):
                        if i == 0 or features[len(features) - 1] != listdf[i][1]:
                            features.append(listdf[i][1])
                        else:
                            pass

                    info["data"] = {" Videos": info["data"][" Videos"]}
                    # adding generic data
                    zeros = []
                    for i in range(len(info["videoPaths"])):
                        zeros.append(0)
                    featuresDict = {}
                    for i in range(len(features)):
                        info["data"][str(features[i])] = zeros
                        featuresDict[str(features[i])] = [0, 0]
                    for i in range(len(info["DLCvideoPaths"])):
                        info["DLCvideoPaths"][i]["bodyparts"] = featuresDict
                Mp4fileList = os.listdir(self.path)

                for i in range(x):
                    if not Mp4fileList[x - (i + 1)].endswith(".mp4"):
                        Mp4fileList.pop(x - (i + 1))
                for i in range(len(Mp4fileList)):
                    for j in range(len(info["videoPaths"])):
                        if Mp4fileList[i].startswith(
                            info["videoPaths"][j]["title"][
                                : len(info["videoPaths"][j]["title"]) - 4
                            ]
                        ):
                            info["videoPaths"][j]["DLC.mp4"] = Mp4fileList[i]

                with open("config.yaml", "w") as file:
                    yaml.dump(
                        info, file, default_flow_style=False, Dumper=NoAliasDumper
                    )

                self.yamlUpdateUI()

        except:
            print("error 4")

    def FolderSearchField(self):
        """When enter is pressed will check if path is valid for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = self.searchField.text()
        try:
            # Checksif path exist and then cheanges interface and updates changes to yaml
            if os.path.exists(self.path):
                self.path = self.path.replace("\\", "/")
                info = openYaml()

                info["folderPath"] = str(self.path)
                fileList = os.listdir(self.path)
                x = len(fileList)

                for i in range(x):
                    if not fileList[x - (i + 1)].endswith(".mp4"):
                        fileList.pop(x - (i + 1))

                info["videoPaths"] = fileList.copy()
                for i in range(len(fileList)):
                    info["videoPaths"][i] = {
                        "title": info["videoPaths"][i],
                        "points": [],
                        "lengths": {"Top": "", "Bottom": "", "Right": "", "Left": ""},
                        "DLC": "",
                        "DLC.mp4": "",
                        "group": []
                    }

                info["data"] = {" Videos": fileList.copy()}

                with open("config.yaml", "w") as file:
                    yaml.dump(
                        info, file, default_flow_style=False, Dumper=NoAliasDumper
                    )

                self.yamlUpdateUI()

            else:
                print("error 2")
        except:
            print("error 1")

    def DLCFolderSearchField(self):
        """When enter is pressed will check if path is valid for folder that contains video files and updates config file"""
        self.cwd = os.getcwd()
        self.path = self.searchFieldDLC.text()
        try:
            # Checksif path exist and then cheanges interface and updates changes to yaml
            if os.path.exists(self.path):
                self.path = self.path.replace("\\", "/")
                info = openYaml()
                info["DLCfolderPath"] = str(self.path)
                fileList = os.listdir(self.path)
                x = len(fileList)
                for i in range(x):
                    if not fileList[x - (i + 1)].endswith(".h5"):
                        fileList.pop(x - (i + 1))

                info["DLCvideoPaths"] = []
                for i in range(len(fileList)):
                    info["DLCvideoPaths"].append({"h5": fileList[i], "bodyparts": {}})
                    for j in range(len(info["videoPaths"])):
                        if fileList[i].startswith(
                            info["videoPaths"][j]["title"][
                                : len(info["videoPaths"][j]["title"]) - 4
                            ]
                        ):
                            info["videoPaths"][j]["DLC"] = fileList[i]

                if len(fileList) > 0:
                    PROJECT_DIR = Path(self.path)
                    df = pd.read_hdf(PROJECT_DIR / fileList[0])
                    listdf = list(df)
                    # creates feature list
                    features = []
                    for i in range(len(listdf)):
                        if i == 0 or features[len(features) - 1] != listdf[i][1]:
                            features.append(listdf[i][1])
                        else:
                            pass
                    info["data"] = {" Videos": info["data"][" Videos"]}
                    # adding generic data
                    zeros = []
                    for i in range(len(info["videoPaths"])):
                        zeros.append(0)
                    featuresDict = {}
                    for i in range(len(features)):
                        info["data"][str(features[i])] = zeros
                        featuresDict[str(features[i])] = [0, 0]
                    for i in range(len(info["DLCvideoPaths"])):
                        info["DLCvideoPaths"][i]["bodyparts"] = featuresDict

                Mp4fileList = os.listdir(self.path)

                for i in range(x):
                    if not Mp4fileList[x - (i + 1)].endswith(".mp4"):
                        Mp4fileList.pop(x - (i + 1))
                for i in range(len(Mp4fileList)):
                    for j in range(len(info["videoPaths"])):
                        if Mp4fileList[i].startswith(
                            info["videoPaths"][j]["title"][
                                : len(info["videoPaths"][j]["title"]) - 4
                            ]
                        ):
                            info["videoPaths"][j]["DLC.mp4"] = Mp4fileList[i]

                with open("config.yaml", "w") as file:
                    yaml.dump(
                        info, file, default_flow_style=False, Dumper=NoAliasDumper
                    )

                self.yamlUpdateUI()

            else:
                print("error 2")
        except:
            print("error 1")

    def yamlUpdateUI(self):
        """Will take the info from the config file and update the UI"""
        info = openYaml()

        if len(info["folderPath"]) != 0:
            self.searchField.setText("")
            self.searchField.setPlaceholderText(info["folderPath"])
        else:
            self.searchField.setPlaceholderText("Enter Folder Path")

        if len(info["DLCfolderPath"]) != 0:
            self.searchFieldDLC.setText("")
            self.searchFieldDLC.setPlaceholderText(info["DLCfolderPath"])
        else:
            self.searchFieldDLC.setPlaceholderText("Enter Folder Path")

        self.listVideoFolders.clear()
        self.listVideoFolders.addItems(info["data"][" Videos"])

        self.listDLCVideoFolders.clear()
        for i in range(len(info["DLCvideoPaths"])):
            self.listDLCVideoFolders.addItem(info["DLCvideoPaths"][i]["h5"])

        self.ComboVidMenu.clear()
        self.ComboVidMenu.addItems(info["data"][" Videos"])

        self.ComboVidValidationMenu.clear()
        self.ComboVidValidationMenu.addItems(info["data"][" Videos"])

        self.ComboVidMenuCorner.clear()
        self.ComboVidMenuCorner.addItems(info["data"][" Videos"])

        self.ComboVidMenuSchema.clear()
        self.ComboVidMenuSchema.addItems(info["data"][" Videos"])

        self.listVideoFoldersValidation.clear()
        self.listVideoFoldersValidation.addItems(info["data"][" Videos"])

        if len(str(info["BoxWidth"])) != 0:
            self.FieldBoxWidth.setText("")
            self.FieldBoxWidth.setPlaceholderText(str(info["BoxWidth"]))
        else:
            self.FieldBoxWidth.setPlaceholderText("Box Width in mm")

        if len(str(info["BoxHeight"])) != 0:
            self.FieldBoxHeight.setText("")
            self.FieldBoxHeight.setPlaceholderText(str(info["BoxHeight"]))
        else:
            self.FieldBoxHeight.setPlaceholderText("Box Height in mmm")

        self.featuresDataDisplay.setModel(pandasModel(pd.DataFrame(info["data"])))
        self.featuresDataDisplay.resizeColumnsToContents()

    def StoreProjName(self):
        """Will store the project name to the config file"""
        name = self.projNameField.text()
        if len(name) != 0:
            info = openYaml()
            info["Name"] = name
            self.projNameField.setText("")
            self.projNameField.setPlaceholderText(str(name))
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        else:
            self.projNameField.setText("")

    def StoreProjLocation(self):
        """Will store the project location to the config file (specific for create tab)"""
        loc = self.projLocField.text()

        if os.path.exists(loc):
            info = openYaml()
            info["Path"] = loc
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText(str(loc))
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText(str(loc))
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        else:
            self.projLocField.setText("")

    def StoreProjLocationv2(self):
        """Will store the project location to the config file (specific for load tab)"""
        loc = self.projLocFieldv2.text()
        if os.path.exists(loc):
            info = openYaml()
            info["Path"] = loc
            self.projLocField.setText("")
            self.projLocField.setPlaceholderText(str(loc))
            self.projLocFieldv2.setText("")
            self.projLocFieldv2.setPlaceholderText(str(loc))
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        else:
            self.projLocFieldv2.setText("")

    def PathSearch(self):
        """button to store the project location to the config file (for both create and load tabs)"""
        self.cwd = os.getcwd()
        self.path = QFileDialog.getExistingDirectory(
            self, "Open the location of the folder", r"" + str(self.cwd)
        )
        try:
            # Checks path and then cheanges interface and updates changes to yaml
            if len(self.path) != 0:
                info = openYaml()
                info["Path"] = self.path
                self.projLocField.setPlaceholderText(self.path)
                self.projLocFieldv2.setPlaceholderText(self.path)
                with open("config.yaml", "w") as file:
                    yaml.dump(
                        info, file, default_flow_style=False, Dumper=NoAliasDumper
                    )

        except:
            print("Failed to choose valid path")

    def boxWidthSave(self):
        """Will store the box width to the config file (specific for choose points tab)"""
        bw = self.FieldBoxWidth.text()
        try:
            eval(bw + "+0")
            bw = float(bw)
            info = openYaml()
            info["BoxWidth"] = bw
            self.FieldBoxWidth.setText("")
            self.FieldBoxWidth.setPlaceholderText(str(bw))
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

        except:
            self.FieldBoxWidth.setText("Invalid Entry")

    def boxHeightSave(self):
        """Will store the box height to the config file (specific for choose points tab)"""
        bh = self.FieldBoxHeight.text()
        try:
            eval(bh + "+0")
            bh = float(bh)
            info = openYaml()
            info["BoxHeight"] = bh
            self.FieldBoxHeight.setText("")
            self.FieldBoxHeight.setPlaceholderText(str(bh))
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

        except:
            self.FieldBoxHeight.setText("Invalid Entry")

    def placeHodlerBtn(self):
        """PLACE HOLDER FOR ACTUAL BUTTONS"""
        sender = self.sender()
        # print(sender.text() + " was pressed")

    def Create_DLC_Project(self):
        """When pressed will update tabs and start the process for creating a new project including clearing config file"""
        try:
            self.startTab.removeTab(1)
        except:
            pass
        self.startTab.addTab(self.tabCreate, "Create")
        self.startTab.setCurrentIndex(1)

        # wil clear config file
        if ClearConfig_popup() == 16384:
            info = {
                "folderPath": "",
                "DLCfolderPath": "",
                "videoPaths": [],
                "DLCvideoPaths": [],
                "zone": [],
                "BoxHeight": "",
                "BoxWidth": "",
                "Name": "",
                "Path": "",
                "numFeatures": "2",
                "data": {" Videos": [], "Feature 1": [], "Feature 2": []},
                "uncertainty": 0.6,
                "groups": [],
                "threshold": 20
            }
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def Open_DLC_Project(self):
        """When pressed will update tabs and start the process for loading a existing project"""
        try:
            self.startTab.removeTab(1)
        except:
            pass
        self.startTab.addTab(self.tabLoad, "Load")
        self.startTab.setCurrentIndex(1)

    #    pop up not yet connected to choices (to connect to the yaml file)

    def locationInImage(self, event):
        """When pressed will save place in image clicked and append to list however points won't be adjusted for the image so may not like what is imagined"""

        helper = openHelperYaml()
        try:
            if self.labelImageOriCorner.text() != "Original Image Place Holder":
                pos = str(event.pos())
                pos = pos.strip("PyQt5.QtCore.Qpoint")
                pos = pos.strip("()")

                info = openYaml()
                if len(pos) == 0:
                    # cord = [0,0]
                    pass
                else:
                    cord = pos.split(", ")
                    cord[0] = int(
                        int(cord[0])
                        * self.cornerImageDim[0]
                        / self.labelImageOriCorner.width()
                    )
                    cord[1] = int(
                        int(cord[1])
                        * self.cornerImageDim[1]
                        / self.labelImageOriCorner.height()
                    )
                    for i in range(len(info["videoPaths"])):
                        if (
                            info["videoPaths"][i]["title"]
                            == self.ComboVidMenuCorner.currentText()
                            and len(helper["points"][i]) < 4
                        ):
                            helper["points"][i].append(cord)
                        elif (
                            info["videoPaths"][i]["title"]
                            == self.ComboVidMenuCorner.currentText()
                            and len(helper["points"][i]) == 4
                        ):
                            helper["points"][i][3] = cord

                    with open("helper.yaml", "w") as file:
                        yaml.dump(
                            helper, file, default_flow_style=False, Dumper=NoAliasDumper
                        )
        except:
            print("fail")

        self.displayFrameCorner()

    def clearPointsCorner(self):
        """Clears points of the selected video"""
        info = openYaml()
        helper = openHelperYaml()
        for i in range(len(info["videoPaths"])):
            if info["videoPaths"][i]["title"] == self.ComboVidMenuCorner.currentText():
                helper["points"][i] = []
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.displayFrameCorner()

    def saveToAllCorner(self):
        """Takes the points of the currently selected image and will save the points to all the others"""
        if str(SetForAllVideos_popup()) == "16384":
            info = openYaml()
            helper = openHelperYaml()
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                ):
                    points = helper["points"][i]
            for j in range(len(info["videoPaths"])):
                helper["points"][j] = points.copy()
            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
            self.displayFrameCorner()

    def fieldTextUpdater(self):
        """Updates field  goes from TL to TR to BR to BL"""
        info = openYaml()
        helper = openHelperYaml()
        try:
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                ):
                    self.FieldTL.setPlaceholderText("Enter Cordinate in x y form")
                    self.FieldTL.setText("")
                    self.FieldTR.setPlaceholderText("Enter Cordinate in x y form")
                    self.FieldTR.setText("")
                    self.FieldBR.setPlaceholderText("Enter Cordinate in x y form")
                    self.FieldBR.setText("")
                    self.FieldBL.setPlaceholderText("Enter Cordinate in x y form")
                    self.FieldBL.setText("")

                    self.FieldTL.setPlaceholderText(
                        str(helper["points"][i][0][0])
                        + " "
                        + str(helper["points"][i][0][1])
                    )
                    self.FieldTR.setPlaceholderText(
                        str(helper["points"][i][1][0])
                        + " "
                        + str(helper["points"][i][1][1])
                    )
                    self.FieldBR.setPlaceholderText(
                        str(helper["points"][i][2][0])
                        + " "
                        + str(helper["points"][i][2][1])
                    )
                    self.FieldBL.setPlaceholderText(
                        str(helper["points"][i][3][0])
                        + " "
                        + str(helper["points"][i][3][1])
                    )
        except:
            pass

    def FieldPointRegistrationTL(self):
        """Saves the top left position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = sender.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                ):
                    if len(helper["points"][i]) >= 4:
                        helper["points"][i][0] = cord
                    elif len(helper["points"][i]) == 0:
                        helper["points"][i] = [cord]
                    elif len(helper["points"][i]) < 4:
                        helper["points"][i].insert(0, cord)
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.displayFrameCorner()

    def FieldPointRegistrationTR(self):
        """Saves the top Right position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = sender.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                ):
                    if len(helper["points"][i]) >= 4:
                        helper["points"][i][1] = cord
                    elif len(helper["points"][i]) == 0:
                        helper["points"][i] = [cord]
                    elif len(helper["points"][i]) == 1:
                        helper["points"][i].append(cord)
                    elif len(helper["points"][i]) < 4:
                        helper["points"][i].insert(1, cord)
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.displayFrameCorner()

    def FieldPointRegistrationBR(self):
        """Saves the Bottom Right position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = sender.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                ):
                    if len(helper["points"][i]) >= 4:
                        helper["points"][i][2] = cord
                    elif len(helper["points"][i]) == 0:
                        helper["points"][i] = [cord]
                    elif len(helper["points"][i]) <= 2:
                        helper["points"][i].append(cord)
                    elif len(helper["points"][i]) < 4:
                        helper["points"][i].insert(2, cord)
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.displayFrameCorner()

    def FieldPointRegistrationBL(self):
        """Saves the Bottom left position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = sender.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                ):
                    if len(helper["points"][i]) >= 4:
                        helper["points"][i][3] = cord
                    elif len(helper["points"][i]) == 0:
                        helper["points"][i] = [cord]
                    elif len(helper["points"][i]) <= 3:
                        helper["points"][i].append(cord)
                    elif len(helper["points"][i]) < 4:
                        helper["points"][i].insert(3, cord)
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.displayFrameCorner()

    def toRegisterCorners(self):
        """Will continue from the Choose points tab and register corners button to register corners tab and remove everything"""
        try:
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabRegisterCorners, "Register Corners")
        info = openYaml()
        helper = openHelperYaml()
        helper["points"] = []
        for i in range(len(info["videoPaths"])):
            helper["points"].append(info["videoPaths"][i]["points"])

        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)

    def toZones(self):
        """Will continue from the Choose points tab and register corners button to register corners tab and remove everything"""
        try:
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabZone, "Zones")
        info = openYaml()
        helper = openHelperYaml()
        zoneList = []
        for zone in info["zones"]:
            zoneList.append(zone)
        zoneList = sorted(
                zoneList,
                key=lambda a: sum(
                    ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
                ),
            )
        helper["Zones"] = info["zones"]
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        
        self.ComboZoneMenuZone.clear()
        self.ComboZoneMenuZone.addItems(zoneList)
        self.ZoneDisplay()

    def DoneRegisterCornersToBack(self, save=True):
        """Brings back all tabs and gets rid of register corners tab"""
        try:
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        self.startTab.setCurrentIndex(1)
        if save:
            info = openYaml()
            helper = openHelperYaml()
            for i in range(len(info["videoPaths"])):
                try:
                    info["videoPaths"][i]["points"] = helper["points"][i]
                except:
                    pass
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def ToGroup(self):
        """brings user to group tab"""
        try:
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabGroup, "Group")
        self.updateGroups()

    def DoneGroupToBack(self):
        """Brings back all tabs and gets rid of group tab"""
        try:
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        self.startTab.setCurrentIndex(3)

    def toNext(self):
        """Will continue from the create or load project button and will update tabs to move to the rest"""
        sender = self.sender()
        pathExist = True
        info = openYaml()
        if not os.path.exists(info["Path"]):
            pathExist = False
            self.createhelplabel.setText("You need")
        nameExist = True
        if len(str(info["Name"])) == 0 and sender.text() == "Create Project":
            nameExist = False

        if nameExist and pathExist:
            try:
                self.startTab.removeTab(0)
                self.startTab.removeTab(0)
            except:
                pass
            self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
            self.startTab.addTab(self.tabPointSelection, "Choose Points")
            self.startTab.addTab(self.tabScoring, "Scoring")
            self.startTab.addTab(self.tabValidation, "Validation")

        elif (not nameExist) and (not pathExist):
            self.createhelplabel.setText("You need to enter a project name and path")
        elif not nameExist:
            self.createhelplabel.setText("You need to enter a project name")
        elif not pathExist and sender.text() == "Create Project":
            self.createhelplabel.setText("You need to enter a project path")
        else:
            self.loadhelplabel.setText("You need to enter a project path")

    def displayFrame(self):
        """Displays 1st frame of the video"""
        info = openYaml(False)

        if self.ComboVidMenu.count() != 0 and os.path.exists(info["folderPath"]):
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(str(PROJECT_DIR / self.ComboVidMenu.currentText()))
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            ret, frame = cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
            image = image.scaled(300, 300, Qt.KeepAspectRatio)
            pixmap = QPixmap(image)

            self.labelImageOri.setPixmap(pixmap)
            self.labelImageOri.setScaledContents(True)

        else:
            self.labelImageOri.setText("Original Image Place Holder")
        self.displayAltFrame()

    def displayAltFrame(self):
        """Displays 1st frame of the altered video"""
        info = openYaml(False)
        for i in range(len(info["videoPaths"])):
            if info["videoPaths"][i]["title"] == self.ComboVidMenu.currentText():
                index = i
        if (
            self.ComboVidMenu.count() != 0
            and os.path.exists(info["folderPath"])
            and len(info["videoPaths"][index]["points"]) == 4
        ):
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(str(PROJECT_DIR / self.ComboVidMenu.currentText()))
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            ret, frame = cap.read()
            registration_points = np.array(info["videoPaths"][index]["points"]).astype(
                np.float32
            )

            x = registration_points[:, 0]
            y = registration_points[:, 1]
            if str(info["BoxWidth"]).isnumeric() and str(info["BoxHeight"]).isnumeric():
                wid, hei = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
            else:
                wid, hei = 500, 500
            schema = np.array([[0, 0], [wid, 0], [wid, hei], [0, hei]]).astype(
                np.float32
            )
            homogeneous_transform = cv2.getPerspectiveTransform(
                registration_points, schema
            )
            frame = cv2.warpPerspective(frame, homogeneous_transform, (wid, hei))

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
            image = image.scaled(300, 300, Qt.KeepAspectRatio)
            pixmap = QPixmap(image)

            self.labelImageAlt.setPixmap(pixmap)
            self.labelImageAlt.setScaledContents(True)

        else:
            print("else")
            self.labelImageAlt.setText("Altered Image Place Holder")

    def displayFrameCorner(self):
        """Displays 1st frame of the video (in register corners tab)"""
        info = openYaml(False)
        helper = openHelperYaml()

        if self.ComboVidMenuCorner.count() != 0 and os.path.exists(info["folderPath"]):
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(
                str(PROJECT_DIR / self.ComboVidMenuCorner.currentText())
            )
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)

            ret, frame = cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape

            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)

            imwidth = image.width()
            imheight = image.height()
            self.labelImgBL.setText("0," + str(imheight))
            self.labelImgBR.setText(str(imwidth) + "," + str(imheight))
            self.labelImgTL.setText("0,0")
            self.labelImgTR.setText(str(imwidth) + ",0")
            self.zoneImageDim = [imwidth, imheight]
            pixmap = QPixmap(image)
            # Sets points
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuCorner.currentText()
                    and len(info["videoPaths"][i]["title"]) != 0
                ):
                    index = i
                    for j in range(len(helper["points"][i])):
                        painter = QtGui.QPainter(pixmap)
                        if j == 0:
                            pen = QPen(Qt.red)
                        elif j == 1:
                            pen = QPen(Qt.magenta)
                        elif j == 2:
                            pen = QPen(Qt.cyan)
                        elif j == 3:
                            pen = QPen(Qt.green)

                        pen.setWidth(10)

                        painter.setPen(pen)
                        painter.drawPoint(
                            int(helper["points"][i][j][0]),
                            int(helper["points"][i][j][1]),
                        )
                        painter.end()

            self.labelImageOriCorner.setPixmap(pixmap)
            self.labelImageOriCorner.setMinimumSize(300, 300)

            self.labelImageOriCorner.setMaximumSize(600, 600)
            self.labelImageOriCorner.setScaledContents(True)

            if "index" not in locals():
                for i in range(len(info["videoPaths"])):
                    if (
                        info["videoPaths"][i]["title"]
                        == self.ComboVidMenuCorner.currentText()
                    ):
                        index = i

            # Displays altered image
            if ("index" in locals()) and len(helper["points"][index]) == 4:
                registration_points = np.array(helper["points"][index]).astype(
                    np.float32
                )

                if (
                    str(info["BoxWidth"]).isnumeric()
                    and str(info["BoxHeight"]).isnumeric()
                ):
                    wid, hei = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
                else:
                    wid, hei = 500, 500
                schema = np.array([[0, 0], [wid, 0], [wid, hei], [0, hei]]).astype(
                    np.float32
                )
                homogeneous_transform = cv2.getPerspectiveTransform(
                    registration_points, schema
                )

                frame = cv2.warpPerspective(frame, homogeneous_transform, (wid, hei))

                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = frame.shape
                bytes_per_line = ch * w
                altimage = QImage(
                    frame.data, w, h, bytes_per_line, QImage.Format_RGB888
                )
                altimage = altimage.scaled(300, 300, Qt.KeepAspectRatio)
                altpixmap = QPixmap(altimage)

                self.labelImageAltCorner.setPixmap(altpixmap)
                self.labelImageAltCorner.setMinimumSize(300, 300)
                self.labelImageAltCorner.setMaximumSize(600, 600)
                self.labelImageAltCorner.setScaledContents(True)
            else:
                self.labelImageAltCorner.setText(
                    "Altered Image Place Holder\nWill be visble when 4 points are selected"
                )

            # Updates the text fields
            self.fieldTextUpdater()

        else:
            self.labelImageOriCorner.setText("Original Image Place Holder")
            self.labelImgBL.setText("")
            self.labelImgBR.setText("")
            self.labelImgTL.setText("")
            self.labelImgTR.setText("")

    def displayAltFrameSchema(self):
        """Displays 1st frame of the altered video"""

        info = openYaml(False)
        for i in range(len(info["videoPaths"])):
            if info["videoPaths"][i]["title"] == self.ComboVidMenuSchema.currentText():
                index = i

        if (
            self.ComboVidMenuSchema.count() != 0
            and os.path.exists(info["folderPath"])
            and ("index" in locals())
            and len(info["videoPaths"][index]["points"]) == 4
        ):
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(
                str(PROJECT_DIR / self.ComboVidMenuSchema.currentText())
            )
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)
            ret, frame = cap.read()
            registration_points = np.array(info["videoPaths"][index]["points"]).astype(
                np.float32
            )

            x = registration_points[:, 0]
            y = registration_points[:, 1]
            if str(info["BoxWidth"]).isnumeric() and str(info["BoxHeight"]).isnumeric():
                wid, hei = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
            else:
                wid, hei = 500, 500
            schema = np.array([[0, 0], [wid, 0], [wid, hei], [0, hei]]).astype(
                np.float32
            )
            homogeneous_transform = cv2.getPerspectiveTransform(
                registration_points, schema
            )
            frame = cv2.warpPerspective(frame, homogeneous_transform, (wid, hei))

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape
            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
            image = image.scaled(300, 300, Qt.KeepAspectRatio)
            pixmap = QPixmap(image)

            self.labelImageAltSchema.setPixmap(pixmap)
            self.labelImageAltSchema.setScaledContents(True)

            if (
                str(info["videoPaths"][index]["lengths"]["Top"]).isnumeric()
                and len(str(info["videoPaths"][index]["lengths"]["Top"])) != 0
            ):
                self.FieldTSchema.setText("")
                self.FieldTSchema.setPlaceholderText(
                    str(info["videoPaths"][index]["lengths"]["Top"])
                )
            else:
                self.FieldTSchema.setPlaceholderText("Enter enter width in mm")
                self.FieldTSchema.setText("")
            if (
                str(info["videoPaths"][index]["lengths"]["Bottom"]).isnumeric()
                and len(str(info["videoPaths"][index]["lengths"]["Bottom"])) != 0
            ):
                self.FieldBSchema.setText("")
                self.FieldBSchema.setPlaceholderText(
                    str(info["videoPaths"][index]["lengths"]["Bottom"])
                )
            else:
                self.FieldBSchema.setPlaceholderText("Enter enter width in mm")
                self.FieldBSchema.setText("")
            if (
                str(info["videoPaths"][index]["lengths"]["Right"]).isnumeric()
                and len(str(info["videoPaths"][index]["lengths"]["Right"])) != 0
            ):
                self.FieldRSchema.setText("")
                self.FieldRSchema.setPlaceholderText(
                    str(info["videoPaths"][index]["lengths"]["Right"])
                )
            else:
                self.FieldRSchema.setPlaceholderText("Enter enter length in mm")
                self.FieldRSchema.setText("")
            if (
                str(info["videoPaths"][index]["lengths"]["Left"]).isnumeric()
                and len(str(info["videoPaths"][index]["lengths"]["Left"])) != 0
            ):
                self.FieldLSchema.setText("")
                self.FieldLSchema.setPlaceholderText(
                    str(info["videoPaths"][index]["lengths"]["Left"])
                )
            else:
                self.FieldLSchema.setPlaceholderText("Enter enter length in mm")
                self.FieldLSchema.setText("")

        else:
            print("else")
            self.labelImageAltSchema.setText("Altered Image Place Holder")
            self.FieldBSchema.setPlaceholderText("Enter enter width in mm")
            self.FieldBSchema.setText("")
            self.FieldTSchema.setPlaceholderText("Enter enter width in mm")
            self.FieldTSchema.setText("")
            self.FieldRSchema.setPlaceholderText("Enter enter length in mm")
            self.FieldRSchema.setText("")
            self.FieldLSchema.setPlaceholderText("Enter enter length in mm")
            self.FieldLSchema.setText("")

    def FieldLengthRegistrationTop(self):
        """Saves the Top length"""
        sender = self.sender()
        info = openYaml()

        length = sender.text()

        if length.isnumeric():
            length = int(length)
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuSchema.currentText()
                ):
                    info["videoPaths"][i]["lengths"]["Top"] = length
                    self.FieldTSchema.setText("")
                    self.FieldTSchema.setPlaceholderText(str(length))

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def FieldLengthRegistrationRight(self):
        """Saves the Right Length"""
        sender = self.sender()
        info = openYaml()

        length = sender.text()

        if length.isnumeric():
            length = int(length)
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuSchema.currentText()
                ):
                    info["videoPaths"][i]["lengths"]["Right"] = length
                    self.FieldRSchema.setText("")
                    self.FieldRSchema.setPlaceholderText(str(length))

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def FieldLengthRegistrationLeft(self):
        """Saves the Left Length"""
        sender = self.sender()
        info = openYaml()

        length = sender.text()

        if length.isnumeric():
            length = int(length)
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuSchema.currentText()
                ):
                    info["videoPaths"][i]["lengths"]["Left"] = length
                    self.FieldLSchema.setText("")
                    self.FieldLSchema.setPlaceholderText(str(length))

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def FieldLengthRegistrationBottom(self):
        """Saves the Bottom Length"""
        sender = self.sender()
        info = openYaml()

        length = sender.text()

        if length.isnumeric():
            length = int(length)
            for i in range(len(info["videoPaths"])):
                if (
                    info["videoPaths"][i]["title"]
                    == self.ComboVidMenuSchema.currentText()
                ):
                    info["videoPaths"][i]["lengths"]["Bottom"] = length
                    self.FieldBSchema.setText("")
                    self.FieldBSchema.setPlaceholderText(str(length))

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def clearLengths(self):
        """clears the saved lengths of the box"""
        info = openYaml()
        for i in range(len(info["videoPaths"])):
            info["videoPaths"][i]["lengths"] = {
                "Top": "",
                "Bottom": "",
                "Right": "",
                "Left": ""
            }
        self.FieldBSchema.setPlaceholderText("Enter enter width in mm")
        self.FieldBSchema.setText("")
        self.FieldTSchema.setPlaceholderText("Enter enter width in mm")
        self.FieldTSchema.setText("")
        self.FieldRSchema.setPlaceholderText("Enter enter length in mm")
        self.FieldRSchema.setText("")
        self.FieldLSchema.setPlaceholderText("Enter enter length in mm")
        self.FieldLSchema.setText("")

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def setForAllLengths(self):
        """sets all lengths the same"""
        info = openYaml()
        for j in range(len(info["videoPaths"])):
            if info["videoPaths"][j]["title"] == self.ComboVidMenuSchema.currentText():
                for i in range(len(info["videoPaths"])):
                    info["videoPaths"][i]["lengths"] = info["videoPaths"][j]["lengths"]

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

    def ValidationPlayVid(self, breaker=False):
        """Validates wether the video is playing correctly (still work in progress)"""
        helper = openHelperYaml()

        if breaker or self.vidPlayingVal != self.ComboVidValidationMenu.currentText():
            try:
                self.threadVal.running = False
                del self.threadVal
            except:
                pass
            self.threadVal = ThreadOpenCV(self.ComboVidValidationMenu.currentText())
            self.threadVal.changePixmap.connect(self.setImage)
            self.sliderVal.setRange(0, helper["ValidationVideoSettings"]["TotalFrames"])
            self.inzone()

        else:
            self.threadVal = ThreadOpenCV(self.ComboVidValidationMenu.currentText())
            self.threadVal.changePixmap.connect(self.setImage)

        self.vidPlayingVal = self.ComboVidValidationMenu.currentText()

    def playVideo(self):
        """Plays the video"""
        try:
            self.featuresDataDisplay.resizeColumnsToContents()
            if self.vidPlayingVal != self.ComboVidValidationMenu.currentText():
                
                self.threadVal.running = False
                del self.threadVal
                x = 1 / 0
            self.threadVal.start()
        
            
        except:
            self.ValidationPlayVid(True)
            self.threadVal.start()

    def stopVideo(self):
        """stop the video"""
        try:
            if self.vidPlayingVal != self.ComboVidValidationMenu.currentText():
                # print("pass")
                # del self.threadVal
                x = 1 / 0
            self.threadVal.running = False
        except:
            self.ValidationPlayVid(True)

    def setImage(self, image):
        """Sets frame"""
        # print("2")
        helper = openHelperYaml()
        # print(helper["ValidationVideoSettings"]["Frame"])

        # self.FieldTimeValidation.setPlaceholderText(str(round(helper["ValidationVideoSettings"]["Frame"]/helper["ValidationVideoSettings"]["FPS"],2))) #for seconds
        self.FieldTimeValidation.setPlaceholderText(
            str(helper["ValidationVideoSettings"]["Frame"])
        )

        self.sliderVal.setSliderPosition(helper["ValidationVideoSettings"]["Frame"])

        # Keeps track of currentlocation but currently won't delete the last point so kinda useless
        # self.GraphValidation.plot([helper["ValidationVideoSettings"]["Frame"]], [-1], pen='r', symbol='o')
        # self.videoTrackerIndex = helper["ValidationVideoSettings"]["Frame"]

        if helper["ValidationVideoSettings"]["PlayBackSpeed"] != float(
            self.PlayBackSpeedValidationMenu.currentText()
        ):
            helper["ValidationVideoSettings"]["PlayBackSpeed"] = float(
                self.PlayBackSpeedValidationMenu.currentText()
            )  # Doesn't seem to change speed when playing, when done resets video
            with open("helper.yaml", "w") as file:  # No new info to be saved
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)

        self.labelVideoValidation.setPixmap(QPixmap.fromImage(image))

    def changeFrameSlider(self):
        """Slider will change the frame but it will mess up if you switch the video then scroll (trying to fix)"""
        self.stopVideo()
        helper = openHelperYaml()

        # Original maybe semi work
        helper["ValidationVideoSettings"]["Frame"] = self.sliderVal.value()
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)

        self.playVideo()

    def ChangeVideo(self):
        try:
            self.featuresDataDisplay.resizeColumnsToContents()
            self.stopVideo()
        except:
            pass
        finally:
            self.ValidationPlayVid()
            self.stopVideo()


    def FrameSet(self):
        """Will change the frame to the designated frame"""

        helper = openHelperYaml()
        if (
            self.FieldTimeValidation.text().isnumeric()
            and int(self.FieldTimeValidation.text())
            <= helper["ValidationVideoSettings"]["TotalFrames"]
        ):
            self.stopVideo()

            self.sliderVal.setSliderPosition(int(self.FieldTimeValidation.text()))
            helper["ValidationVideoSettings"]["Frame"] = int(
                round(float(self.FieldTimeValidation.text()))
            )
            # self.FieldTimeValidation.setPlaceholderText(str(round(helper["ValidationVideoSettings"]["Frame"]/helper["ValidationVideoSettings"]["FPS"],2))) #In regard to seconds
            self.FieldTimeValidation.setPlaceholderText(
                str(int(round(float(self.FieldTimeValidation.text()))))
            )

            self.FieldTimeValidation.setText("")

            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
            self.ValidationPlayVid()

    def inzone(self):
        """goes through each h5 file applies the zone transformation and will extract the number of frames of which each body part is inside of the zone and update the config file"""

        # Transform image frame
        info = openYaml()
        self.featuresDataDisplay.resizeColumnsToContents()
        try:
            w, h = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
            schema = np.array([[0, 0], [w, 0], [w, h], [0, h]]).astype(np.float32)

            for i in range(len(info["videoPaths"])):
                if (
                    len(info["videoPaths"][i]["points"]) == 4
                    and info["DLCvideoPaths"][i]["h5"] == info["videoPaths"][i]["DLC"]
                ):
                    registration_points = np.array(
                        [info["videoPaths"][i]["points"]]
                    ).astype(np.float32)

                    homogeneous_transform = cv2.getPerspectiveTransform(
                        registration_points, schema
                    )
                    # transformed_frame = cv2.warpPerspective(frame, homogeneous_transform, (w, h))

                    # Loads dataframe
                    df = pd.read_hdf(
                        str(
                            Path(info["DLCfolderPath"]) / info["DLCvideoPaths"][i]["h5"]
                        )
                    )
                    # loads data frame
                    # transforms it
                    transformed_df = transform_dataframe_to_perspective(
                        df, homogeneous_transform
                    )

                    features = []
                    # How to select specific bodyparts and get a centroid
                    for key in info["DLCvideoPaths"][i]["bodyparts"]:
                        bodyparts_of_interest = [str(key)]
                        centroid = (
                            transformed_df.loc[
                                :, pd.IndexSlice[:, bodyparts_of_interest]
                            ]
                            .groupby(level="coords", axis=1)
                            .mean()
                        )
                        numZones = 0
                        for zone in info["zones"]:
                            # Goes through each zone and checks if mouse in zone
                            # Defining the center zone
                            zone_points = np.array(info["zones"][zone])
                            # not sure how to loop through zones and save findings (wouldnt it just rewrite the stuff thats written)

                            # When is the mouse part inside?
                            center_zone = plt.Polygon(zone_points, alpha=0.5)
                            mouse_points = centroid[["x", "y"]].values
                            is_in_center = center_zone.contains_points(mouse_points)

                            if numZones == 0:
                                tally = is_in_center
                            else:
                                for j in range(len(tally)):
                                    # makes it true if mouse is in any of the zones
                                    if tally[j] or is_in_center[j]:
                                       tally[j] = True 
                            numZones += 1
                        
                        features.append(key)
                        info["DLCvideoPaths"][i]["bodyparts"][str(key)][1] = int(
                            tally.sum()
                        )
                        info["data"][str(key)][i] = int(tally.sum())

                        
                elif (
                    len(info["videoPaths"][i]["points"]) == 0
                    and info["DLCvideoPaths"][i]["h5"] == info["videoPaths"][i]["DLC"]
                ):
                 

                    # Loads dataframe
                    transformed_df = pd.read_hdf(
                        str(
                            Path(info["DLCfolderPath"]) / info["DLCvideoPaths"][i]["h5"]
                        )
                    )
   

                    features = []
                    # How to select specific bodyparts and get a centroid
                    for key in info["DLCvideoPaths"][i]["bodyparts"]:
                        bodyparts_of_interest = [str(key)]
                        centroid = (
                            transformed_df.loc[
                                :, pd.IndexSlice[:, bodyparts_of_interest]
                            ]
                            .groupby(level="coords", axis=1)
                            .mean()
                        )
                        numZones = 0
                        for zone in info["zones"]:
                            # Goes through each zone and checks if mouse in zone
                            # Defining the center zone
                            zone_points = np.array(info["zones"][zone])
                            # not sure how to loop through zones and save findings (wouldnt it just rewrite the stuff thats written)

                            # When is the mouse part inside?
                            center_zone = plt.Polygon(zone_points, alpha=0.5) # nessessary?
                            mouse_points = centroid[["x", "y"]].values
                            is_in_center = center_zone.contains_points(mouse_points)

                            if numZones == 0:
                                tally = is_in_center
                            else:
                                for j in range(len(tally)):
                                    # makes it true if mouse is in any of the zones
                                    if tally[j] or is_in_center[j]:
                                       tally[j] = True 
                            numZones += 1
                        
                        # Defining the center zone
                    

                        # When is the mouse part inside?
                        features.append(key)

                 
                        info["DLCvideoPaths"][i]["bodyparts"][str(key)][1] = int(
                            tally.sum()
                        )
                        info["data"][str(key)][i] = int(tally.sum())

                        
                if (
                    self.ComboVidValidationMenu.currentText()
                    == info["videoPaths"][i]["title"]
                ):
                    likelihood = transformed_df.xs("likelihood", level="coords", axis=1)
                    transformed_df = transformed_df.where(
                        likelihood > info["uncertainty"]
                    )  # Will leave gap for distance measurment and wil assume false for inzone
                    centroid = (
                        transformed_df.loc[:, pd.IndexSlice[:, features]]
                        .groupby(level="coords", axis=1)
                        .mean()
                    )

                    # When is the mouse inside?
                    # Need to do forloop to run though?
                    #  I think this is the only set of this code that is needed (its done two times aboue but I think it might be completely unnesary and could just be lumped in here)
                    numZones = 0
                    for zone in info["zones"]:
                        # Goes through each zone and checks if mouse in zone
                        # Defining the center zone
                        zone_points = np.array(info["zones"][zone])
                        # not sure how to loop through zones and save findings (wouldnt it just rewrite the stuff thats written)

                        # When is the mouse part inside?
                        center_zone = plt.Polygon(zone_points, alpha=0.5)
                        mouse_points = centroid[["x", "y"]].values
                        is_in_center = center_zone.contains_points(mouse_points)

                        if numZones == 0:
                            tally = is_in_center
                        else:
                            for j in range(len(tally)):
                                # makes it true if mouse is in any of the zones
                                if tally[j] or is_in_center[j]:
                                    tally[j] = True 
                        numZones += 1
                    # center_zone = plt.Polygon(zone_points, alpha=0.5)
                  

                    try:
                        self.GraphValidation.getPlotItem().clearPlots()

                    except:
                        pass

                    if self.GraphValidationMenu.currentText() == "In zone":
                        self.GraphTitleValidationLabel.setText(
                            "Mouse inside zone per frame \n(1 means inside zone 0 means outside)"
                        )

                        x = np.arange(len(tally))
                        y = np.array(tally)
                        # print(tally)
                        # # Add the scatter plot item to the graph widget

                        plot = self.GraphValidation.plot(x=x, y=y)

                        # Set the pen
                        plot.setPen(pg.mkPen("g", width=2))

                        self.GraphValidation.setXRange(0, len(tally), padding=0)

                        # self.GraphValidation.setYRange(0, 1, padding=0)
                        self.GraphValidation.getPlotItem().getViewBox().setMouseEnabled(
                            y=False
                        )
                        self.GraphValidation.getPlotItem().setLabels(
                            left="Inside zone", bottom="Frame"
                        )
                        self.GraphValidation.getPlotItem().getViewBox()  # unclear how to loop back to change color

                    elif self.GraphValidationMenu.currentText() == "Distance":
                        self.GraphTitleValidationLabel.setText(
                            "Distance traveled per frame"
                        )

                        bodyparts_of_interest = features
                        centroid = (
                            transformed_df.loc[
                                :, pd.IndexSlice[:, bodyparts_of_interest]
                            ]
                            .groupby(level="coords", axis=1)
                            .mean()
                        )
                        location = centroid[["x", "y"]].values
                        deltas = location[1:] - location[:-1]
                        delta_x = deltas[:, 0]
                        delta_y = deltas[:, 1]

                        distance = np.sqrt(delta_x**2 + delta_y**2)
                        threshold = info["threshold"]
                        distance[distance > threshold] = np.nan
                        x = np.arange(len(distance))
                        y = np.array(distance)
                        plot = self.GraphValidation.plot(x=x, y=y)

                        # Set the pen
                        plot.setPen(pg.mkPen("g", width=2))

                        self.GraphValidation.setXRange(0, len(distance), padding=0)
                        self.GraphValidation.getPlotItem().setLabels(
                            left="Distance moved per frame (mm)", bottom="Frame"
                        )

            self.featuresDataDisplay.setModel(pandasModel(pd.DataFrame(info["data"])))
            self.featuresDataDisplay.resizeColumnsToContents()
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        except:
            print("fail")

    def ResetValidation(self):
        """Resets validation tab (currently just messes things up)"""
        info = openYaml()

        helper = {
            "ValidationVideoSettings": {
                "PlayBackSpeed": 1,
                "Frame": 0,
                "FPS": 30,
                "TotalFrames": 1,
            },
            "PartsOfInterest": [],
            "points": [],
            "Zones":{}
        }
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.PlayBackSpeedValidationMenu.setCurrentIndex(1)
        self.FieldTimeValidation.setPlaceholderText(str(0))
        self.sliderVal.setValue(0)
        self.FieldTimeValidation.setText("")
        try:
            self.threadVal.running = False
        except:
            pass

        self.labelVideoValidation.setText("Place Holder for Video")
        self.GraphTitleValidationLabel.setText("Graph")

        self.listVideoFoldersValidation = QListWidget()
        if len(info["data"][" Videos"]) != 0:
            self.listVideoFoldersValidation.addItems(info["data"][" Videos"])

        self.featuresDataDisplay = QTableView()
        if len(info["data"][" Videos"]) >= 3:
            self.featuresDataDisplay.setMinimumHeight(115)
        elif len(info["data"][" Videos"]) == 2:
            self.featuresDataDisplay.setMinimumHeight(85)
        elif len(info["data"][" Videos"]) == 1:
            self.featuresDataDisplay.setMinimumHeight(55)
        # self.featuresDataDisplay.setMaximumHeight(len(info["data"][" Videos"]) + 25)
        self.featuresDataDisplay.setModel(pandasModel(pd.DataFrame(info["data"])))
        self.featuresDataDisplay.resizeColumnsToContents()
        hheader = self.featuresDataDisplay.horizontalHeader()
        hheader.setSectionResizeMode(QHeaderView.Stretch)
        hheader.setStyleSheet("::section {background-color: grey; color: black;}")

        # self.labelValidationTimeHeading = QLabel("Time (s)") #for time

        self.FieldTimeValidation.setPlaceholderText("Enter Frame")

        self.ComboVidValidationMenu = QComboBox()
        self.ComboVidValidationMenu.addItems(info["data"][" Videos"])

        self.PlayBackSpeedValidationMenu.setCurrentIndex(1)

    def changePlayBackSpeed(self):
        """changes play back speed"""
        helper = openHelperYaml()
        helper["ValidationVideoSettings"]["PlayBackSpeed"] = float(
                self.PlayBackSpeedValidationMenu.currentText()
            )

        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        try:
            self.stopVideo()
            
        except:
            pass
        self.playVideo()

    def ExportData(self):
        info = openYaml()
        # try:
        if True:
            w, h = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
            schema = np.array([[0, 0], [w, 0], [w, h], [0, h]]).astype(np.float32)

            for i in range(len(info["videoPaths"])):
                if (
                    len(info["videoPaths"][i]["points"]) == 4
                    and info["DLCvideoPaths"][i]["h5"] == info["videoPaths"][i]["DLC"]
                ):
                    registration_points = np.array(
                        [info["videoPaths"][i]["points"]]
                    ).astype(np.float32)

                    homogeneous_transform = cv2.getPerspectiveTransform(
                        registration_points, schema
                    )
                    # transformed_frame = cv2.warpPerspective(frame, homogeneous_transform, (w, h))

                    # Loads dataframe
                    df = pd.read_hdf(
                        str(
                            Path(info["DLCfolderPath"]) / info["DLCvideoPaths"][i]["h5"]
                        )
                    )
                    transformed_df = transform_dataframe_to_perspective(
                        df, homogeneous_transform
                    )

                    # Create a sample DataFrame
                    data = pd.DataFrame(transformed_df)
                    print(data)
                    # Write the DataFrame to an Excel file
                    # data.to_excel("data.xlsx", index=True)

    def updateGroups(self):
        """Updates the group tab"""

        info = openYaml()
        groups = set()

        counter = (self.listVideoGroupLayout.count() // 3) - 1 #determines how many rows are of videos


        self.listVideoGroupLayout.setHorizontalSpacing(10)

        for i in range(len((info["data"][" Videos"]))):
            index = i
            localGroup = "N/A"
            info["videoPaths"][i]["group"] = sorted(
                info["videoPaths"][i]["group"],
                key=lambda a: sum(
                    ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
                ),
            )

            for j in range(len(info["videoPaths"][i]["group"])):
                groups.add(str(info["videoPaths"][i]["group"][j]))
                if j == 0:
                    localGroup = str(info["videoPaths"][i]["group"][j])
                else:
                    localGroup = (
                        localGroup + "/" + str(info["videoPaths"][i]["group"][j])
                    )

            if i > counter - 1:
                exec("self.checkBoxGroup" + str(i) + " = QCheckBox()")
                exec(
                    "self.listVideoGroupLayout.addWidget(self.checkBoxGroup"
                    + str(i)
                    + ", "
                    + str(i + 1)
                    + ", 0, 1, 1)"
                )
                exec(
                    "self.VidTitleGroupLabel"
                    + str(i)
                    + ' = QLabel(str((info["data"][" Videos"][i])))'
                )
                exec(
                    "self.listVideoGroupLayout.addWidget(self.VidTitleGroupLabel"
                    + str(i)
                    + ", "
                    + str(i + 1)
                    + ", 1, 1, 1)"
                )
                exec("self.GroupGroupLabel" + str(i) + " = QLabel(localGroup)")
                exec(
                    "self.listVideoGroupLayout.addWidget(self.GroupGroupLabel"
                    + str(i)
                    + ", "
                    + str(i + 1)
                    + ", 2, 1, 1)"
                )
            if i <= counter - 1:
                # exec("print(self.checkBoxGroup" + str(i) + ".isChecked())")
                exec(
                    "self.VidTitleGroupLabel"
                    + str(i)
                    + '.setText(str((info["data"][" Videos"]['
                    + str(i)
                    + "])))"
                )
                exec("self.GroupGroupLabel" + str(i) + ".setText(localGroup)")

        if len((info["data"][" Videos"])) != counter and counter > len(
            (info["data"][" Videos"])
        ):
            toRemove = counter - len((info["data"][" Videos"]))
            for i in range(toRemove):
                # try:
                if True:
                    # print(i+index+1)
                    exec(
                        "self.listVideoGroupLayout.removeWidget(self.checkBoxGroup"
                        + str(i + index + 1)
                        + ")"
                    )
                    exec("del self.checkBoxGroup" + str(i + index + 1))
                    exec(
                        "self.listVideoGroupLayout.removeWidget(self.VidTitleGroupLabel"
                        + str(i + index + 1)
                        + ")"
                    )
                    exec("del self.VidTitleGroupLabel" + str(i + index + 1))
                    exec(
                        "self.listVideoGroupLayout.removeWidget(self.GroupGroupLabel"
                        + str(i + index + 1)
                        + ")"
                    )
                    exec("del self.GroupGroupLabel" + str(i + index + 1))
                # except:
                #     print("this faiked")

 
      

        for name in groups:
            if not name in info["groups"]:
                info["groups"].append(name)
        self.ComboVidExistingGroups.clear()
        # print(info["groups"])
        groups = sorted(
            groups,
            key=lambda a: sum(
                ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
            ),
        )
        info["groups"] = sorted(
            info["groups"],
            key=lambda a: sum(
                ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
            ),
        )

        self.ComboVidExistingGroups.addItems(info["groups"])
        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        # self.listVideoGroup = QWidget()
        # self.listVideoGroup.layout = QGridLayout()

    def selectAllGroupsBtnGroup(self):
        """Selects all videos on the group tab"""
        
        counter = (self.listVideoGroupLayout.count() // 3) - 1
        for i in range(counter):
            try:
                exec("self.checkBoxGroup" + str(i) + ".setChecked(True)")
            except:
                print("error code look in manual")

    def deselectAllGroupsBtnGroup(self):
        """deselects all videos on the group tab"""
        counter = (self.listVideoGroupLayout.count() // 3) - 1
        for i in range(counter):
            try:
                exec("self.checkBoxGroup" + str(i) + ".setChecked(False)")
            except:
                print("error code 785839")

    def newGroupNameHolder(self):
        """Allows user to type group name and when enter is pressed name is saved as place holder"""
        self.FieldGroupTitle.setPlaceholderText(str(self.FieldGroupTitle.text()))
        self.FieldGroupTitle.setText("")

    def addGroupBtnGroup(self):
        """Takes placeholder text of field and makes that a new group"""
        if self.FieldGroupTitle.text() != "":
            self.newGroupNameHolder()
        info = openYaml()
        if (
            not self.FieldGroupTitle.placeholderText() in info["groups"]
        ) and self.FieldGroupTitle.placeholderText() != "Title":
            info["groups"].append(str(self.FieldGroupTitle.placeholderText()))
            info["groups"] = sorted(
                info["groups"],
                key=lambda a: sum(
                    ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
                ),
            )
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)

        self.FieldGroupTitle.setPlaceholderText("Title")

    def addVideoToGroup(self):
        """Adds all selected videos to group"""
        info = openYaml()
        for i in range(len((info["data"][" Videos"]))):
            try:
                exec(
                    "global testChecked;testChecked = self.checkBoxGroup"
                    + str(i)
                    + ".isChecked()"
                )

                if testChecked:
                    inGroup = False
                    for j in range(len(info["videoPaths"][i]["group"])):
                        if info["videoPaths"][i]["group"][j] == str(
                            self.ComboVidExistingGroups.currentText()
                        ):
                            inGroup = True
                            break
             
                    if not inGroup:
                        info["videoPaths"][i]["group"].append(
                            self.ComboVidExistingGroups.currentText()
                        )

            except:
                print("error code 684938")

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.updateGroups()

    def removeVideoFromGroup(self):
        """removes all selected videos from group"""
        info = openYaml()
        for i in range(len((info["data"][" Videos"]))):
            try:
                exec(
                    "global testChecked;testChecked = self.checkBoxGroup"
                    + str(i)
                    + ".isChecked()"
                )
                if testChecked:
                    for j in range(len(info["videoPaths"][i]["group"])):
                        if info["videoPaths"][i]["group"][j] == str(
                            self.ComboVidExistingGroups.currentText()
                        ):
                            info["videoPaths"][i]["group"].remove(
                                info["videoPaths"][i]["group"][j]
                            )
                            break
            except:
                print("error code 4967390")

        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.updateGroups()

    def removeGroup(self):
        """removes group"""

        info = openYaml()
        toRemove = self.ComboVidExistingGroups.currentText()
        for i in range(len((info["data"][" Videos"]))):
            try:
                for j in range(len(info["videoPaths"][i]["group"])):
                    if info["videoPaths"][i]["group"][j] == str(
                        self.ComboVidExistingGroups.currentText()
                    ):
                        info["videoPaths"][i]["group"].remove(
                            info["videoPaths"][i]["group"][j]
                        )

                        break

            except:
                print("error code 48678372")
        info["groups"].remove(toRemove)
        with open("config.yaml", "w") as file:
            yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.updateGroups()

    def ZoneDisplay(self):
        """Changes the image displays on the zone tab shoing either one zone or multiple"""

        info = openYaml(False)
        helper = openHelperYaml()
        for i in range(len(info["videoPaths"])):
            if info["videoPaths"][i]["title"] == self.ComboVidMenuZone.currentText():
                index = i
      
        if (
            self.ComboVidMenuZone.count() != 0
            and os.path.exists(info["folderPath"])
             
        ):
            PROJECT_DIR = Path(info["folderPath"])
            cap = cv2.VideoCapture(
                str(PROJECT_DIR / self.ComboVidMenuZone.currentText())
            )
            cap.set(cv2.CAP_PROP_POS_FRAMES, 1)

            ret, frame = cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame.shape

            bytes_per_line = ch * w
            image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)

            
            pixmapOneZone = QPixmap(image)
            pixmapZones = QPixmap(image)

            if "index" not in locals():
                for i in range(len(info["videoPaths"])):
                    if (
                        info["videoPaths"][i]["title"]
                        == self.ComboVidMenuZone.currentText()
                    ):
                        index = i

            # Displays altered image
            if ("index" in locals()) and len(info["videoPaths"][index]["points"]) == 4:
                registration_points = np.array(info["videoPaths"][index]["points"]).astype(
                    np.float32
                )

                if (
                    str(info["BoxWidth"]).isnumeric()
                    and str(info["BoxHeight"]).isnumeric()
                ):
                    wid, hei = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
                else:
                    wid, hei = 500, 500
                schema = np.array([[0, 0], [wid, 0], [wid, hei], [0, hei]]).astype(
                    np.float32
                )
                homogeneous_transform = cv2.getPerspectiveTransform(
                    registration_points, schema
                )

                frame = cv2.warpPerspective(frame, homogeneous_transform, (wid, hei))

                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = frame.shape
                bytes_per_line = ch * w
                altimage = QImage(
                    frame.data, w, h, bytes_per_line, QImage.Format_RGB888
                )
                self.zoneImageDim = [altimage.width(), altimage.height()]
                altimage.scaled(500, 500, Qt.KeepAspectRatio)
                altimageoneZone = altimage.copy()
                altimageZones = altimage.copy()
                pixmapOneZone = QPixmap(altimage)
                pixmapZones = QPixmap(altimage)
            else:
                
                altimageoneZone = image.copy()
                altimageZones = image.copy()

                


            # Sets points
            
            if (
                info["videoPaths"][index]["title"]
                == self.ComboVidMenuZone.currentText()
                and len(info["videoPaths"][index]["title"]) != 0
            ):
                painter = QPainter(altimageZones)
                pixmapZones = QPixmap(altimageZones)
                # painter.drawPixmap(altimageZones.height(), altimageZones.width(), pixmapZones)
                for key in helper["Zones"]:
                    if len(helper["Zones"][key]) == 4:
                        painter = QtGui.QPainter(pixmapZones)
                        
                        brush = QBrush(QColor(0, 0, 150, 127))

                        points = QPolygon(
                            [
                                QPoint(helper["Zones"][key][0][0], helper["Zones"][key][0][1]),
                                QPoint(helper["Zones"][key][1][0], helper["Zones"][key][1][1]),
                                QPoint(helper["Zones"][key][2][0], helper["Zones"][key][2][1]),
                                QPoint(helper["Zones"][key][3][0], helper["Zones"][key][3][1]),
                            ]
                        )

                        painter.setBrush(brush)
                        painter.drawPolygon(points)
                        painter.end()

                        if key == self.ComboZoneMenuZone.currentText():
                            painter2 = QPainter(altimageoneZone)
                            pixmapOneZone = QPixmap(altimageoneZone)
                            painter2 = QtGui.QPainter(pixmapOneZone)
                            
                            brush2 = QBrush(QColor(0, 0, 150, 127))

                            points = QPolygon(
                                [
                                    QPoint(helper["Zones"][key][0][0], helper["Zones"][key][0][1]),
                                    QPoint(helper["Zones"][key][1][0], helper["Zones"][key][1][1]),
                                    QPoint(helper["Zones"][key][2][0], helper["Zones"][key][2][1]),
                                    QPoint(helper["Zones"][key][3][0], helper["Zones"][key][3][1]),
                                ]
                            )
                            painter2.setBrush(brush2)
                            painter2.drawPolygon(points)
                            painter2.end()
                            del painter2
                            del brush2
                          

                    if key == self.ComboZoneMenuZone.currentText():
                        self.FieldTLZone.setPlaceholderText("Enter Cordinate in x y form")
                        self.FieldTRZone.setPlaceholderText("Enter Cordinate in x y form")
                        self.FieldBRZone.setPlaceholderText("Enter Cordinate in x y form")
                        self.FieldBLZone.setPlaceholderText("Enter Cordinate in x y form")
                        for j in range(len(helper["Zones"][key])):
                            painter = QtGui.QPainter(pixmapOneZone)
                            if j == 0:
                                pen = QPen(Qt.red)
                                self.FieldTLZone.setPlaceholderText(str(helper["Zones"][key][j][0]) + " " +
                                str(helper["Zones"][key][j][1]))
                            elif j == 1:
                                pen = QPen(Qt.magenta)
                                self.FieldTRZone.setPlaceholderText(str(helper["Zones"][key][j][0]) + " " +
                                str(helper["Zones"][key][j][1]))
                            elif j == 2:
                                pen = QPen(Qt.cyan)
                                self.FieldBRZone.setPlaceholderText(str(helper["Zones"][key][j][0]) + " " +
                                str(helper["Zones"][key][j][1]))
                            elif j == 3:
                                pen = QPen(Qt.green)
                                self.FieldBLZone.setPlaceholderText(str(helper["Zones"][key][j][0]) + " " +
                                str(helper["Zones"][key][j][1]))

                            pen.setWidth(10)

                            painter.setPen(pen)
                            painter.drawPoint(
                                int(helper["Zones"][key][j][0]),
                                int(helper["Zones"][key][j][1]),
                            )
                            painter.end()
                            
                        
                    else:
                        pass
                del painter
                del brush


        
            self.labelImageOneZone.setPixmap(pixmapOneZone)
            self.labelImageOneZone.setMinimumSize(300, 300)
            self.labelImageOneZone.setMaximumSize(600, 600)
            self.labelImageOneZone.setScaledContents(True)
            self.labelImageZone.setPixmap(pixmapZones)
            self.labelImageZone.setMinimumSize(300, 300)
            self.labelImageZone.setMaximumSize(600, 600)
            self.labelImageZone.setScaledContents(True)

    def addZoneZone(self):
        """Adds zone to zone tab"""
        self.ComboZoneMenuZone
        helper = openHelperYaml()
        ZoneList = []
        for key in helper["Zones"]:
            ZoneList.append(key)

        if not self.FieldNameZone.text() in ZoneList:
            ZoneList.append(self.FieldNameZone.text())
            self.FieldNameZone.setPlaceholderText("Name of New Zone")
            helper["Zones"][self.FieldNameZone.text()] = []
            ZoneList = sorted(
                    ZoneList,
                    key=lambda a: sum(
                        ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
                    ),
                )
            self.ComboZoneMenuZone.clear()
            self.ComboZoneMenuZone.addItems(ZoneList)
            self.ComboZoneMenuZone.setCurrentIndex(ZoneList.index(self.FieldNameZone.text()))
            self.FieldNameZone.setText("")
            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        
        self.FieldTLZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldTRZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBRZone.setPlaceholderText("Enter Cordinate in x y form")
        self.FieldBLZone.setPlaceholderText("Enter Cordinate in x y form")
        for j in range(len(helper["Zones"][self.FieldNameZone.text()])):
            if j == 0:
                self.FieldTLZone.setPlaceholderText(str(helper["Zones"][self.FieldNameZone.text()][j][0]) + " " +
                str(helper["Zones"][self.FieldNameZone.text()][j][1]))
            elif j == 1:
                self.FieldTRZone.setPlaceholderText(str(helper["Zones"][self.FieldNameZone.text()][j][0]) + " " +
                str(helper["Zones"][self.FieldNameZone.text()][j][1]))
            elif j == 2:
                self.FieldBRZone.setPlaceholderText(str(helper["Zones"][self.FieldNameZone.text()][j][0]) + " " +
                str(helper["Zones"][self.FieldNameZone.text()][j][1]))
            elif j == 3:
                self.FieldBLZone.setPlaceholderText(str(helper["Zones"][self.FieldNameZone.text()][j][0]) + " " +
                str(helper["Zones"][self.FieldNameZone.text()][j][1]))

    def removeZoneZone(self):
        """Removes zone to zone tab"""
        helper = openHelperYaml()
        try:
            helper["Zones"].pop(self.ComboZoneMenuZone.currentText())
            ZoneList = []
            for key in helper["Zones"]:
                ZoneList.append(key) 
            ZoneList = sorted(
                    ZoneList,
                    key=lambda a: sum(
                        ([a[:l].lower(), a[:l]] for l in range(1, len(a) + 1)), []
                    ),
                )
            self.ComboZoneMenuZone.clear()
            self.ComboZoneMenuZone.addItems(ZoneList)
            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
            self.ZoneDisplay()
        except:
            pass
            
    def locationInImageZone(self, event):
            """When pressed will save place in image clicked and append to list however points won't be adjusted for the image so may not like what is imagined"""
            
            info = openYaml()
            helper = openHelperYaml()
            try:
                if self.labelImageOneZone.text() != "One zone Image Place Holder":
                    pos = str(event.pos())
                    pos = pos.strip("PyQt5.QtCore.Qpoint")
                    pos = pos.strip("()")

                    try:
                        wid, hei = int(info["BoxWidth"]), int(info["BoxHeight"])  # in mm
                    except:
                        wid, hei = 500, 500
                    
                    if len(pos) == 0:
                        # cord = [0,0]
                        pass
                    else:
                        cord = pos.split(", ")
                        
                        cord[0] = int(
                            int(cord[0])
                            * self.zoneImageDim[0]
                            / self.labelImageOneZone.width()
                          
                        )
                        cord[1] = int(
                            int(cord[1])
                            * self.zoneImageDim[1]
                            / self.labelImageOneZone.height()
                        )
                        helper["Zones"][self.ComboZoneMenuZone.currentText()]
                        if (
                            len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) < 4
                        ):
                            helper["Zones"][self.ComboZoneMenuZone.currentText()].append(cord)
                        elif (
                            
                            len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) == 4
                        ):
                            helper["Zones"][self.ComboZoneMenuZone.currentText()][3] = cord

                        helper["points"] = []
                        with open("helper.yaml", "w") as file:
                            yaml.dump(
                                helper, file, default_flow_style=False, Dumper=NoAliasDumper
                            )

                        self.ZoneDisplay()
            except:
                print("fail")

    def clearZone(self):
        """Clears zone"""
        helper = openHelperYaml()
        try:
            helper["Zones"][self.ComboZoneMenuZone.currentText()] = []
            
            
            with open("helper.yaml", "w") as file:
                yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
            self.ZoneDisplay()
        except:
            pass

    def DoneRegisterZonesToBack(self, save=True):
        """Brings back all tabs and gets rid of register corners tab"""
        try:
            self.startTab.removeTab(0)
        except:
            pass
        self.startTab.addTab(self.tabFolderDisplay, "Folder Display")
        self.startTab.addTab(self.tabPointSelection, "Choose Points")
        self.startTab.addTab(self.tabScoring, "Scoring")
        self.startTab.addTab(self.tabValidation, "Validation")
        self.startTab.setCurrentIndex(1)
        if save:
            info = openYaml()
            helper = openHelperYaml()
            info["zones"] = helper["Zones"]
            with open("config.yaml", "w") as file:
                yaml.dump(info, file, default_flow_style=False, Dumper=NoAliasDumper)
            

    def FieldZoneRegistrationTL(self):
        """Saves the top left position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
       
        # print(self.FieldTLZone.text())
        cord = self.FieldTLZone.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            
            if len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) >= 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()][0] = cord
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) == 0:
                helper["Zones"][self.ComboZoneMenuZone.currentText()] = [cord]
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) < 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].insert(0, cord)
       
            self.FieldTLZone.setText("")
            
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.ZoneDisplay()
       

    def FieldZoneRegistrationTR(self):
        """Saves the top Right position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = self.FieldTRZone.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            
            if len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) >= 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()][1] = cord
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) == 0:
                helper["Zones"][self.ComboZoneMenuZone.currentText()] = [cord]
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) == 1:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].append(cord)
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) < 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].insert(1, cord)
        
            self.FieldTRZone.setText("")
         
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.ZoneDisplay()

    def FieldZoneRegistrationBR(self):
        """Saves the Bottom Right position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = self.FieldBRZone.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            
            if len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) >= 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()][2] = cord
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) == 0:
                helper["Zones"][self.ComboZoneMenuZone.currentText()] = [cord]
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) <= 2:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].append(cord)
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) < 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].insert(2, cord)
           
            self.FieldBRZone.setText("")
         
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.ZoneDisplay()

    def FieldZoneRegistrationBL(self):
        """Saves the Bottom left position cordinate for a point"""
        sender = self.sender()
        info = openYaml()
        helper = openHelperYaml()
        cord = self.FieldBLZone.text()
        cord = cord.split(" ")
        if len(cord) == 2 and cord[0].isnumeric() and cord[1].isnumeric():
            cord[0] = int(cord[0])
            cord[1] = int(cord[1])
            
            if len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) >= 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()][3] = cord
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) == 0:
                helper["Zones"][self.ComboZoneMenuZone.currentText()] = [cord]
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) <= 3:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].append(cord)
            elif len(helper["Zones"][self.ComboZoneMenuZone.currentText()]) < 4:
                helper["Zones"][self.ComboZoneMenuZone.currentText()].insert(3, cord)

            self.FieldBLZone.setText("")
        
        with open("helper.yaml", "w") as file:
            yaml.dump(helper, file, default_flow_style=False, Dumper=NoAliasDumper)
        self.ZoneDisplay()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
